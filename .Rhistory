mdat$localtime<-as.POSIXct(format(mdat$timestamp,tz="etc/GMT+3"))
mdat$LocalHour<-as.numeric(strftime(mdat$localtime,format="%H"))
#set duration to minutes
mdat$DurationMax<-mdat$DurationMax/60
#dives can't be longer than 20 minutes
#mdat<-mdat %>% filter(is.na(DurationMax)|DurationMax<20)
#view data
ggmap(troy)+geom_path(data=mdat,aes(x=Longitude, y=Latitude,group=Animal),size=.5) + geom_point(data=mdat,aes(x=Longitude, y=Latitude,col=as.factor(Animal)),size=0.1) + theme_bw() + mytheme
ggsave("Figures/Map.svg")
ggsave("Figures/Map.png")
##Time is the beginning of the first point.
step_length=4
sxy<-split(mdat,mdat$Animal)
#Cut into tracks
#time diff function
timed<-function(d,step_length){
#Order and start with a valid observation
d<-d %>% arrange(timestamp)
startpoint<-which.min(!is.na(d$Latitude))
d<-d[startpoint:nrow(d),]
d$interval <- cut(d$timestamp,breaks = seq(min(d$timestamp), max(d$timestamp), as.difftime(step_length, units="hours")))
#If there are no argos observations, remove interval.
remove_interval<-d %>% group_by(interval) %>% summarize(n=length(!is.na(Latitude))) %>% filter(n==0)
d<-d %>% filter(!interval %in% remove_interval )
#Can we have empty argos intervals?
d<-d %>% filter(!is.na(interval)) %>% droplevels()
#which intervals are more than 12 hours apart
Track=c()
Track[1]<-1
counter=1
for(x in 2:length(unique(d$interval))){
difft<-as.numeric(difftime(as.POSIXct(unique(d$interval)[x]),as.POSIXct(unique(d$interval)[x-1]),units="hours"))
if(difft>step_length){
counter=counter+1
}
Track[x]<-counter
}
d<-d %>% inner_join(data.frame(interval=unique(d$interval),Track))
#First position in each track must be a valid position, recode
d<-d %>% group_by(Track) %>% filter(timestamp >= min(timestamp[!is.na(Latitude)]))
#get jStep and interval time
d<-d %>% group_by(interval) %>% mutate(j=difftime(timestamp,as.POSIXct(interval,tz="GMT"),units="hours")/step_length,jStep=1:n())
#set step and remove tracks less than 2 steps, a bit ugly to maintain subgroup order.
d<-d %>% group_by(Track) %>% mutate(step=as.numeric(as.factor(as.character(interval)))) %>% filter(max(step) > 2)
#remove tracks that are shorter than 12 hours
track_time<-d %>% group_by(Track) %>% summarize(mt=difftime(max(as.POSIXct(timestamp)),min(as.POSIXct(timestamp)),units="hours")) %>% filter(mt>=12) %>% .$Track
return(d)
}
sxy<-lapply(sxy,timed,step_length=step_length)
mdat<-bind_rows(sxy)
mdat %>% group_by(Animal) %>% summarize(n=n())
mdat %>% group_by(Animal) %>% summarize(Tracks=length(unique(Track)))
###################################################
#filter by two whales for the moment
#mdat<-mdat %>% filter(Animal %in% c("131127","131136","131132","131133","154187","131134","131115","131111","131130","131116"))
mdat<-mdat %>% filter(Animal %in% c("131116"))
#remake map
troy<-makemap(mdat)
####################################################
#refactor animal
mdat$jAnimal<-as.numeric(as.factor(mdat$Animal))
##Split into format for JAGS
#Cast time array
j<-reshape2::acast(mdat,jAnimal~Track~step~jStep,value.var="j")
#how many observations per individual in each step
idx<-mdat %>% group_by(jAnimal,Track,step) %>% summarize(n=n())
colnames(idx)<-c("Animal","Track","step","jStep")
idx<-reshape2::acast(data=idx,Animal~Track~step)
#Individuals
ind=length(unique(mdat$Animal))
#tracks per indivudal
tracks<-mdat %>% group_by(Animal) %>% summarize(tracks=length(unique(Track))) %>% .$tracks
#steps per track
steps_all<-mdat %>% group_by(Animal,Track) %>% summarize(n=length(unique(step)))
steps<-reshape2::acast(steps_all,Animal~Track,value.var="n")
#obs array
obs<-reshape2::melt(mdat,measure.vars=c("Longitude","Latitude"))
obs<-reshape2::acast(obs,Animal~Track~step~jStep~variable,fun.aggregate = mean)
obs[!is.finite(obs)]<-NA
#argos class array
mdat$argos.lc<-factor(mdat$Quality,levels=c(3,2,1,0,"A","B"))
mdat$numargos<-as.numeric(mdat$argos.lc)
obs_class<-reshape2::acast(mdat,Animal~Track~step~jStep,value.var="numargos",fun.aggregate = min)
#set interpolated observations to having lowest class of argos error
obs_class[!is.finite(obs_class)]<-6
#average dive depth array
maxdive<-reshape2::acast(mdat,Animal~Track~step~jStep,value.var="DepthMax",fun.aggregate = mean)
hours<-reshape2::acast(mdat,Animal~Track~step~jStep,value.var="LocalHour")
#fill the empty values
maxdive[!is.finite(maxdive)]<-NA
#source jags file
source("Bayesian/TimeDive.R")
#writeLines(readLines("Bayesian/TimeDive.R"))
#prior cov shape
R <- diag(c(1,1))
data=list(hours=hours,divedepth=maxdive,argos=obs,steps=steps,R=R,ind=ind,j=j,idx=idx,tracks=tracks,argos_class=obs_class)
#Inits
stage_init<-hours
stage_init[]<-1
InitStage <- function() {list(stage=array(data=2,dim=c(dim(hours))))}
#paramters to track
pt<-c("alpha","gamma","depth_mu","depth_tau","dive_new","state","E","Enew","beta","beta2")
if(newModel){
system.time(diving<-jags.parallel(model.file = "Bayesian/TimeDive.jags",data=data,n.chains=2,parameters.to.save=pt,n.iter=100,n.burnin=0,n.thin=2,DIC=FALSE,inits = InitStage))
}
#bind chains
pc_dive<-reshape2::melt(diving$BUGSoutput$sims.array)
colnames(pc_dive)<-c("Draw","chain","par","value")
#extract parameter name
pc_dive$parameter<-data.frame(str_match(pc_dive$par,"(\\w+)"))[,-1]
#Extract index
splitpc<-split(pc_dive,pc_dive$parameter)
#single index
splitpc[c("alpha","gamma","depth_mu","depth_tau")]<-lapply(splitpc[c("alpha","gamma","depth_mu","depth_tau")],function(x){
sv<-data.frame(str_match(x$par,"(\\w+)\\[(\\d+)]"))[,3]
pc<-data.frame(x,Behavior=sv)
return(pc)
})
#double index
splitpc[c("beta","beta2")]<-lapply(splitpc[c("beta","beta2")],function(x){
sv<-data.frame(str_match(x$par,"(\\w+)\\[(\\d+),(\\d+)"))[,3:4]
colnames(sv)<-c("Behavior","jAnimal")
pc<-data.frame(x,sv)
return(pc)
})
#3 index
splitpc[c("state")]<-lapply(splitpc[c("state")],function(x){
sv<-data.frame(str_match(x$par,"(\\w+)\\[(\\d+),(\\d+),(\\d+)"))[,3:5]
colnames(sv)<-c("jAnimal","Track","step")
pc<-data.frame(x,sv)
return(pc)
})
#4 index
splitpc[c("dive_new","E","Enew")]<-lapply(splitpc[c("dive_new","E","Enew")],function(x){
sv<-data.frame(str_match(x$par,"(\\w+)\\[(\\d+),(\\d+),(\\d+),(\\d+)]"))[,3:6]
colnames(sv)<-c("jAnimal","Track","step","jStep")
pc<-data.frame(x,sv)
return(pc)
})
#bind all matrices back together
pc_dive<-bind_rows(splitpc)
rm(splitpc)
ggplot(pc_dive[!pc_dive$parameter %in% c("dive_new","state","E","Enew","eval","argos"),],aes(x=Draw,y=value,col=as.factor(chain))) + geom_line() + facet_wrap(~par,scales="free")
#posteriors
ggplot(pc_dive[!pc_dive$parameter %in% c("dive_new","state","E","Enew","eval","argos"),],aes(x=value,fill=as.factor(chain))) + geom_histogram() + facet_wrap(~par,scales="free")
#sum table
pc_dive %>% filter(!parameter %in% c("dive_new","state","E","Enew","eval","argos")) %>% group_by(parameter,Behavior) %>% summarize(mean=round(mean(value),3),upper=round(quantile(value,0.95),3),lower=round(quantile(value,0.05),3))
#Animal lookup table
pc_dive<-mdat %>% ungroup() %>%  dplyr::select(Animal,jAnimal)  %>% distinct() %>% mutate(jAnimal=as.factor(jAnimal)) %>% full_join(pc_dive)
#Take the most common estimate of behavior
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
#Combine posterior summary
mdat$Animal<-as.factor(mdat$Animal)
mdat$Track<-as.factor(mdat$Track)
mdat$step<-as.factor(mdat$step)
state_est<-pc_dive %>% group_by(jAnimal,Track,step) %>%  filter(parameter=="state") %>% summarize(Behavior=Mode(value)) %>% ungroup()  %>% mutate(jAnimal=as.numeric(as.character(jAnimal)),Track=as.numeric(as.character(Track)),step=as.numeric(as.character(step))) %>% inner_join(mdat)
state_est[state_est$Behavior==1,"Behavior"]<-"Traveling"
state_est[state_est$Behavior==2,"Behavior"]<-"Foraging"
ggplot(state_est,aes(x=timestamp,y=-DepthMax,col=Behavior)) + geom_point() + geom_line(size=0.25,aes(group=1)) + facet_wrap(~Animal,scales="free",ncol=1) + theme_bw()
ggsave("Figures/TemporalBehavior.svg")
ggsave("Figures/TemporalBehavior.jpeg",height=8,width=12)
#Behavior lookup
blookup<-data.frame(Behavior=c("Traveling","Foraging"),Index=c(1,2))
#how many of each state to draw?
statecount<-state_est %>% group_by(Behavior) %>% filter(is.na(Latitude)) %>% summarize(n=length(jStep))
pred_dives<-list()
pred_depths<-list()
for(i in 1:nrow(statecount)){
index<-blookup[ blookup$Behavior %in% statecount[i,"Behavior"],"Index"]
depth_tau<-pc_dive %>% filter(parameter %in% c("depth_tau"),Behavior==index)
depth_mu<-pc_dive %>% filter(parameter %in% c("depth_mu"),Behavior==index)
beta<-pc_dive %>% filter(parameter %in% c("beta"),Behavior==index)
beta2<-pc_dive %>% filter(parameter %in% c("beta2"),Behavior==index)
for(x in 1:length(depth_mu)){
#get 100 replicates from that draw
divedraws<-lapply(1:100,function(k){
dive_intercept<-rtruncnorm(n=1,mean=depth_mu$value[x],sd=1/sqrt(depth_tau$value[x]),a=0)
DepthMax<-dive_intercept  + beta$value[x]* cos((2*pi*unique(mdat$LocalHour))/(24)) + beta2$value[x] * sin((2*pi*unique(mdat$LocalHour))/24)
return(data.frame(DepthMax,Hour=unique(mdat$LocalHour),Behavior=statecount[i,"Behavior"]))
})
pred_depths[[x]]<-bind_rows(divedraws)
}
pred_dives[[i]]<-bind_rows(pred_depths)
}
pred_dives<-bind_rows(pred_dives)
ggplot(pred_dives) + geom_histogram(alpha=0.8,aes(x=DepthMax,fill=Behavior))  + theme_bw() + labs(x="Dive Depth (m)")
ggsave("Figures/DiveHist.jpg",height=4,width=7)
#By hours
sumhours<-pred_dives %>% group_by(Hour,Behavior) %>% summarize(mean=mean(DepthMax),upper=quantile(DepthMax,0.95),lower=quantile(DepthMax,0.05))
ggplot(sumhours,aes(x=Hour,y=mean)) + geom_line(linetype="dashed") + geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.4) + facet_wrap(~Behavior)
ggplot(pc_dive[pc_dive$parameter=="dive_new",])+  geom_density(aes(x=value),col='red') + geom_density(data=mdat,aes(x=DepthMax),col="black",size=1.5) + theme_bw() + labs(x="Dive Depth (m)")
ggsave("Figures/DivePredict.jpg",height=4,width=7)
#TODO split by animal
byanimal<-pc_dive[pc_dive$parameter=="dive_new",]
ggplot(mdat)+  geom_density(aes(x=DepthMax),col="black",size=1.5) +  facet_wrap(~Animal,scales="free") + geom_density(data=byanimal,aes(x=value),col='red') + theme_bw() + labs(x="Dive Depth (m)")
ggplot(data=state_est) + geom_boxplot(aes(x=as.factor(LocalHour),y=DepthMax,fill=Behavior)) + ylab("Maximum Dive Depth (km)")+ labs(x="Hour (Local GMT+3)")
ggsave("Figures/Diel.svg")
ggsave("Figures/Diel.png",height=5,width=8,unit="in")
ggplot(data=state_est) + geom_boxplot(aes(x=as.factor(LocalHour),y=DepthMax,fill=Behavior)) + ylab("Maximum Dive Depth (km)") + facet_wrap(~Month) + labs(x="Hour (Local GMT+3)")
ggsave("Figures/DielbyMonth.svg")
ggsave("Figures/DielbyMonth.png",height=5,width=10,unit="in")
ggplot(data=state_est) + geom_boxplot(aes(x=Month,y=DepthMax,fill=Behavior)) + ylab("Maximum Dive Depth (km)")
ggsave("Figures/Month.svg")
ggsave("Figures/Month.png",height=5,width=8,unit="in")
state_est<-state_est %>% arrange(Animal,Track,timestamp)
ggmap(troy) +geom_path(data=state_est %>% filter(!is.na(Latitude)),aes(x=Longitude, y=Latitude,group=paste(Animal,Track)),size=0.5) + geom_point(data=state_est,aes(x=Longitude, y=Latitude,col=Behavior),size=0.5) + mytheme
ggmap(troy) +geom_path(data=state_est %>% filter(!is.na(Latitude)),aes(x=Longitude, y=Latitude,group=paste(Animal,Track)),size=0.5) + geom_point(data=state_est,aes(x=Longitude, y=Latitude,col=Behavior),size=0.5) + mytheme +facet_wrap(~Animal)
#source jags file
source("Bayesian/Foraging.R")
#prior cov shape
R <- diag(c(1,1))
data=list(argos=obs,steps=steps,R=R,ind=ind,j=j,idx=idx,tracks=tracks,argos_class=obs_class)
#paramters to track
pt<-c("alpha","gamma","state")
if(newModel){
system.time(foraging<-jags.parallel(model.file = "Bayesian/Foraging.jags",data=data,n.chains=2,parameters.to.save=pt,n.iter=5000,n.burnin=4000,n.thin=2,DIC=FALSE))
}
#bind chains
pc_dive2d<-reshape2::melt(foraging$BUGSoutput$sims.array)
colnames(pc_dive2d)<-c("Draw","chain","par","value")
#extract parameter name
pc_dive2d$parameter<-data.frame(str_match(pc_dive2d$par,"(\\w+)"))[,-1]
#Extract index
splitpc<-split(pc_dive2d,pc_dive2d$parameter)
#single index
splitpc[c("alpha")]<-lapply(splitpc[c("alpha")],function(x){
sv<-data.frame(str_match(x$par,"(\\w+)\\[(\\d+)]"))[,3]
pc<-data.frame(x,Behavior=sv)
return(pc)
})
#3 index
splitpc[c("state")]<-lapply(splitpc[c("state")],function(x){
sv<-data.frame(str_match(x$par,"(\\w+)\\[(\\d+),(\\d+),(\\d+)"))[,3:5]
colnames(sv)<-c("Animal","Track","step")
pc<-data.frame(x,sv)
return(pc)
})
#bind all matrices back together
pc_dive2d<-bind_rows(splitpc)
rm(splitpc)
ggplot(pc_dive2d[!pc_dive2d$parameter %in% c("state"),],aes(x=Draw,y=value,col=as.factor(chain))) + geom_line() + facet_wrap(~par,scales="free")
#Take the most common estimate of behavior
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
#Combine posterior summary
mdat$Animal<-as.factor(mdat$Animal)
mdat$Track<-as.factor(mdat$Track)
mdat$step<-as.factor(mdat$step)
state_est2d<-pc_dive2d %>% group_by(jAnimal=Animal,Track,step) %>% filter(parameter=="state") %>% summarize(Behavior =Mode(value)) %>% ungroup()  %>% mutate(jAnimal=as.numeric(as.character(jAnimal)),Track=as.numeric(as.character(Track)),step=as.numeric(as.character(step))) %>% inner_join(mdat)
state_est2d[state_est2d$Behavior==1,"Behavior"]<-"Traveling"
state_est2d[state_est2d$Behavior==2,"Behavior"]<-"Foraging"
state_est$Model<-"3D"
state_est2d$Model<-"2D"
allmodels<-bind_rows(state_est,state_est2d)
allmodels<-allmodels %>% arrange(Model,Animal,Track,step,jStep) %>% filter(!is.na(Longitude))
ggmap(troy) +geom_path(data=allmodels,aes(x=Longitude, y=Latitude,group=1,col=Behavior),size=0.5) + geom_point(data=allmodels,aes(x=Longitude, y=Latitude,group=1,col=Behavior),size=0.3) + mytheme + facet_wrap(~Model)
ggsave("Figures/SpatialPred.jpg",height=4,width=7)
allmodels<-spread(allmodels,Model,Behavior)
allmodels$Mismatch<-F
allmodels[allmodels$`2D`=="Traveling" & allmodels$`3D` %in% c("Foraging"),"Mismatch"]<-TRUE
ggmap(troy)+geom_path(data=allmodels,aes(x=Longitude, y=Latitude,group=paste(Animal,Track)),size=.25) + geom_point(data=allmodels,aes(x=Longitude, y=Latitude,col=Mismatch)) + theme_bw() + mytheme + scale_color_manual(values=c("Black","Red"))
ggsave("Figures/Mismatch1.jpg",height=4,width=7)
allmodels$Mismatch<-F
allmodels[allmodels$`2D`=="Traveling" & allmodels$`3D` %in% c("Resting"),"Mismatch"]<-TRUE
ggmap(troy)+geom_path(data=allmodels,aes(x=Longitude, y=Latitude,group=paste(Animal,Track)),size=.25) + geom_point(data=allmodels,aes(x=Longitude, y=Latitude,col=Mismatch)) + theme_bw() + mytheme + scale_color_manual(values=c("Black","Red"))
ggsave("Figures/Mismatch1.jpg",height=4,width=7)
ggplot(sumhours[sumhours$Behavior %in% "Foraging"],aes(x=Hour,y=mean)) + geom_line(linetype="dashed") + geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.4) + facet_wrap(~Animal)
sumhours<-pred_dives %>% group_by(Animal,Hour,Behavior) %>% summarize(mean=mean(DepthMax),upper=quantile(DepthMax,0.95),lower=quantile(DepthMax,0.05))
head(pc_dives)
head(pc_dive)
blookup<-data.frame(Behavior=c("Traveling","Foraging"),Index=c(1,2))
statecount<-state_est %>% group_by(Animal,Behavior) %>% filter(is.na(Latitude)) %>% summarize(n=length(jStep))
statecount
blookup<-data.frame(Behavior=c("Traveling","Foraging"),Index=c(1,2))
statecount<-state_est %>% group_by(Animal,Behavior) %>% filter(is.na(Latitude)) %>% summarize(n=length(jStep))
pred_dives<-list()
pred_depths<-list()
for(i in 1:nrow(statecount)){
index<-blookup[ blookup$Behavior %in% statecount[i,"Behavior"],"Index"]
depth_tau<-pc_dive %>% filter(parameter %in% c("depth_tau"),Behavior==index)
depth_mu<-pc_dive %>% filter(parameter %in% c("depth_mu"),Behavior==index)
beta<-pc_dive %>% filter(parameter %in% c("beta"),Behavior==index,Animal==statecount[i,"Animal"])
beta2<-pc_dive %>% filter(parameter %in% c("beta2"),Behavior==index,Animal==statecount[i,"Animal"])
for(x in 1:length(depth_mu)){
#get 100 replicates from that draw
divedraws<-lapply(1:100,function(k){
dive_intercept<-rtruncnorm(n=1,mean=depth_mu$value[x],sd=1/sqrt(depth_tau$value[x]),a=0)
DepthMax<-dive_intercept  + beta$value[x]* cos((2*pi*unique(mdat$LocalHour))/(24)) + beta2$value[x] * sin((2*pi*unique(mdat$LocalHour))/24)
return(data.frame(DepthMax,Hour=unique(mdat$LocalHour),Animal=Animal==statecount[i,"Animal"],Behavior=statecount[i,"Behavior"]))
})
pred_depths[[x]]<-bind_rows(divedraws)
}
pred_dives[[i]]<-bind_rows(pred_depths)
}
pred_depths<-list()
pred_dives<-list()
pred_depths<-list()
for(i in 1:nrow(statecount)){
#Get parameters
index<-blookup[ blookup$Behavior %in% statecount[i,"Behavior"],"Index"]
depth_tau<-pc_dive %>% filter(parameter %in% c("depth_tau"),Behavior==index)
depth_mu<-pc_dive %>% filter(parameter %in% c("depth_mu"),Behavior==index)
beta<-pc_dive %>% filter(parameter %in% c("beta"),Behavior==index,Animal==statecount[i,"Animal"])
beta2<-pc_dive %>% filter(parameter %in% c("beta2"),Behavior==index,Animal==statecount[i,"Animal"])
#Fit dive depths
for(x in 1:length(depth_mu)){
#get 100 replicates from that draw
divedraws<-lapply(1:100,function(k){
dive_intercept<-rtruncnorm(n=1,mean=depth_mu$value[x],sd=1/sqrt(depth_tau$value[x]),a=0)
DepthMax<-dive_intercept  + beta$value[x]* cos((2*pi*unique(mdat$LocalHour))/(24)) + beta2$value[x] * sin((2*pi*unique(mdat$LocalHour))/24)
return(data.frame(DepthMax,Hour=unique(mdat$LocalHour),Animal=statecount[i,"Animal"],Behavior=statecount[i,"Behavior"]))
})
pred_depths[[x]]<-bind_rows(divedraws)
}
pred_dives[[i]]<-bind_rows(pred_depths)
}
i
beta<-pc_dive %>% filter(parameter %in% c("beta"),Behavior==index,Animal==statecount[i,"Animal"])
statecount[i,"Animal"]
statecount$Animal[i]
#Behavior lookup
blookup<-data.frame(Behavior=c("Traveling","Foraging"),Index=c(1,2))
#how many of each state to draw?
statecount<-state_est %>% group_by(Animal,Behavior) %>% filter(is.na(Latitude)) %>% summarize(n=length(jStep))
pred_dives<-list()
pred_depths<-list()
for(i in 1:nrow(statecount)){
#Get parameters
index<-blookup[ blookup$Behavior %in% statecount[i,"Behavior"],"Index"]
depth_tau<-pc_dive %>% filter(parameter %in% c("depth_tau"),Behavior==index)
depth_mu<-pc_dive %>% filter(parameter %in% c("depth_mu"),Behavior==index)
beta<-pc_dive %>% filter(parameter %in% c("beta"),Behavior==index,Animal==statecount$Animal[i])
beta2<-pc_dive %>% filter(parameter %in% c("beta2"),Behavior==index,Animal==statecount$Animal[i])
#Fit dive depths
for(x in 1:length(depth_mu)){
#get 100 replicates from that draw
divedraws<-lapply(1:100,function(k){
dive_intercept<-rtruncnorm(n=1,mean=depth_mu$value[x],sd=1/sqrt(depth_tau$value[x]),a=0)
DepthMax<-dive_intercept  + beta$value[x]* cos((2*pi*unique(mdat$LocalHour))/(24)) + beta2$value[x] * sin((2*pi*unique(mdat$LocalHour))/24)
return(data.frame(DepthMax,Hour=unique(mdat$LocalHour),Animal=statecount[i,"Animal"],Behavior=statecount[i,"Behavior"]))
})
pred_depths[[x]]<-bind_rows(divedraws)
}
pred_dives[[i]]<-bind_rows(pred_depths)
}
pred_dives<-bind_rows(pred_dives)
ggplot(pred_dives) + geom_histogram(alpha=0.8,aes(x=DepthMax,fill=Behavior))  + theme_bw() + labs(x="Dive Depth (m)")
ggsave("Figures/DiveHist.jpg",height=4,width=7)
#By hours
sumhours<-pred_dives %>% group_by(jAnimal,Hour,Behavior) %>% summarize(mean=mean(DepthMax),upper=quantile(DepthMax,0.95),lower=quantile(DepthMax,0.05))
ggplot(pred_dives) + geom_histogram(alpha=0.8,aes(x=DepthMax,fill=Behavior))  + theme_bw() + labs(x="Dive Depth (m)")
sumhours<-pred_dives %>% group_by(Animal,Hour,Behavior) %>% summarize(mean=mean(DepthMax),upper=quantile(DepthMax,0.95),lower=quantile(DepthMax,0.05))
ggplot(sumhours,aes(x=Hour,y=mean,col=Animal)) + geom_line(linetype="dashed") + geom_ribbon(aes(ymin=lower,ymax=upper,fill=Animal),alpha=0.4) + facet_wrap(~Behavior)
ggplot(sumhours[sumhours$Behavior %in% "Foraging"],aes(x=Hour,y=mean)) + geom_line(linetype="dashed") + geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.4) + facet_wrap(~Animal)
ggplot(sumhours[sumhours$Behavior %in% "Foraging",],aes(x=Hour,y=mean)) + geom_line(linetype="dashed") + geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.4) + facet_wrap(~Animal)
ggplot(pc_dive[pc_dive$parameter=="dive_new",])+  geom_density(aes(x=value),col='red') + geom_density(data=mdat,aes(x=DepthMax),col="black",size=1.5) + theme_bw() + labs(x="Dive Depth (m)")
byanimal<-pc_dive[pc_dive$parameter=="dive_new",]
ggplot(mdat)+  geom_density(aes(x=DepthMax),col="black",size=1.5) +  facet_wrap(~Animal,scales="free") + geom_density(data=byanimal,aes(x=value),col='red') + theme_bw() + labs(x="Dive Depth (m)")
table(mdat$Year)
if(!newModel){
load("/Users/Ben/Dropbox/Whales/Dive/WhalePhys.RData")
newModel=F
}
#get gps data
f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback",pattern="Locations",full.names=T,recursive = T)
gdat<-lapply(f,function(x) read.csv(x,stringsAsFactors=F))
gdat<-lapply(gdat,function(x){
x$Quality<-as.character(x$Quality)
return(x)
})
gdat<-bind_rows(gdat)
#timestamp
gdat$timestamp<-as.POSIXct(gdat$Date,format="%H:%M:%S %d-%b-%Y",tz="GMT")
#
gdat<-gdat[!is.na(gdat$Latitude),]
#crop by extent
d<-SpatialPointsDataFrame(cbind(gdat$Longitude,gdat$Latitude),data=data.frame(gdat),proj4string=CRS("+proj=longlat +datum=WGS84"))
cropoly<-readShapePoly("Data/CutPolygon.shp",proj4string=CRS("+proj=longlat +datum=WGS84"))
b<-d[!is.na(d %over% cropoly)[,2],]
gdat<-b@data
#get dive data files
f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback/",pattern="Behavior",full.names=T,recursive = T)
dat<-bind_rows(lapply(f,read.csv))
dat$timestamp<-as.POSIXct(dat$End,format="%H:%M:%S %d-%b-%Y",tz="GMT")
dat$Month<-months(dat$timestamp)
dat$Month<-factor(dat$Month,levels=month.name)
dat$Hour<-strftime(dat$timestamp,format="%H")
dat$Year<-years(dat$timestamp)
### for testing
#dat<-dat %>% filter(Ptt=="131134")
gdat<-gdat %>% filter(Ptt %in% unique(dat$Ptt))
gdat<-gdat %>% dplyr::select(Animal=Ptt,timestamp,Quality,Latitude,Longitude)
dive<-dat %>% filter(What=="Dive")%>% dplyr::select(Animal=Ptt,timestamp,Hour,Month,Year,DepthMax,DepthMin,DurationMax,DurationMin)
dive<-bind_rows(gdat,dive)
#order by timestamp
dive<-dive %>% arrange(timestamp)
load("/Users/Ben/Dropbox/Whales/Dive/WhalePhys.RData")
#Behavior lookup
blookup<-data.frame(Behavior=c("Traveling","Foraging"),Index=c(1,2))
#how many of each state to draw?
statecount<-state_est %>% group_by(Animal,Behavior) %>% filter(is.na(Latitude)) %>% summarize(n=length(jStep))
pred_dives<-list()
pred_depths<-list()
for(i in 1:nrow(statecount)){
#Get parameters
index<-blookup[ blookup$Behavior %in% statecount[i,"Behavior"],"Index"]
depth_tau<-pc_dive %>% filter(parameter %in% c("depth_tau"),Behavior==index)
depth_mu<-pc_dive %>% filter(parameter %in% c("depth_mu"),Behavior==index)
beta<-pc_dive %>% filter(parameter %in% c("beta"),Behavior==index,Animal==statecount$Animal[i])
beta2<-pc_dive %>% filter(parameter %in% c("beta2"),Behavior==index,Animal==statecount$Animal[i])
#Fit dive depths
for(x in 1:length(depth_mu)){
#get 100 replicates from that draw
divedraws<-lapply(1:100,function(k){
dive_mean<-depth_mu$value[x]  + beta$value[x]* cos((2*pi*unique(mdat$LocalHour))/(24)) + beta2$value[x] * sin((2*pi*unique(mdat$LocalHour))/24)
DepthMax<-rtruncnorm(n=1,mean=dive_mean,sd=1/sqrt(depth_tau$value[x]),a=0)
return(data.frame(DepthMax,Hour=unique(mdat$LocalHour),Animal=statecount[i,"Animal"],Behavior=statecount[i,"Behavior"]))
})
pred_depths[[x]]<-bind_rows(divedraws)
}
pred_dives[[i]]<-bind_rows(pred_depths)
}
pred_dives<-bind_rows(pred_dives)
ggplot(pred_dives) + geom_histogram(alpha=0.8,aes(x=DepthMax,fill=Behavior))  + theme_bw() + labs(x="Dive Depth (m)")
ggsave("Figures/DiveHist.jpg",height=4,width=7)
#By hours
sumhours<-pred_dives %>% group_by(Animal,Hour,Behavior) %>% summarize(mean=mean(DepthMax),upper=quantile(DepthMax,0.95),lower=quantile(DepthMax,0.05))
ggplot(sumhours,aes(x=Hour,y=mean,col=Animal)) + geom_line(linetype="dashed") + geom_ribbon(aes(ymin=lower,ymax=upper,fill=Animal),alpha=0.4) + facet_wrap(~Behavior) + labs(y="Dive Depth (m)")
ggplot(sumhours[sumhours$Behavior %in% "Foraging",],aes(x=Hour,y=mean)) + geom_line(linetype="dashed") + geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.4) + facet_wrap(~Animal) + labs(y="Dive Depth (m)")
ggplot(pc_dive[pc_dive$parameter=="dive_new",])+  geom_density(aes(x=value),col='red') + geom_density(data=mdat,aes(x=DepthMax),col="black",size=1.5) + theme_bw() + labs(x="Dive Depth (m)")
ggsave("Figures/DivePredict.jpg",height=4,width=7)
#TODO split by animal
byanimal<-pc_dive[pc_dive$parameter=="dive_new",]
ggplot(mdat)+  geom_density(aes(x=DepthMax),col="black",size=1.5) +  facet_wrap(~Animal,scales="free") + geom_density(data=byanimal,aes(x=value),col='red') + theme_bw() + labs(x="Dive Depth (m)")
1/sqrt(0.1)
sqrt(1/0.01)
sqrt(0.01)
1/sqrt(0.01)
sqrt(1/0.01)
sqrt(1/0.01)
1/sqrt(0.01)
1/sqrt(10)
sqrt(1/10)
#Behavior lookup
blookup<-data.frame(Behavior=c("Traveling","Foraging"),Index=c(1,2))
#how many of each state to draw?
statecount<-state_est %>% group_by(Animal,Behavior) %>% filter(is.na(Latitude),Behavior=="Foraging") %>% summarize(n=length(jStep))
pred_dives<-list()
pred_depths<-list()
for(i in 1:nrow(statecount)){
#Get parameters
index<-blookup[ blookup$Behavior %in% statecount[i,"Behavior"],"Index"]
depth_tau<-pc_dive %>% filter(parameter %in% c("depth_tau"),Behavior==index)
depth_mu<-pc_dive %>% filter(parameter %in% c("depth_mu"),Behavior==index)
beta<-pc_dive %>% filter(parameter %in% c("beta"),Behavior==index,Animal==statecount$Animal[i])
beta2<-pc_dive %>% filter(parameter %in% c("beta2"),Behavior==index,Animal==statecount$Animal[i])
#Fit dive depths
for(x in 1:length(depth_mu)){
#get 100 replicates from that draw
divedraws<-lapply(1:1000,function(k){
dive_mean<-depth_mu$value[x]  + beta$value[x]* cos((2*pi*unique(mdat$LocalHour))/(24)) + beta2$value[x] * sin((2*pi*unique(mdat$LocalHour))/24)
DepthMax<-rtruncnorm(n=1,mean=dive_mean,sd=sqrt(1/depth_tau$value[x]),a=0)
return(data.frame(DepthMax,Hour=unique(mdat$LocalHour),Animal=statecount[i,"Animal"],Behavior=statecount[i,"Behavior"]))
})
pred_depths[[x]]<-bind_rows(divedraws)
}
pred_dives[[i]]<-bind_rows(pred_depths)
}
qplot(rlnorm(1))
qplot(rlnorm(1e5,``))
qplot(rlnorm(1e5,1))
library(vegan)
library(ape)
data(mite)  # Community composition data, 70 peat cores, 35 species
# Select rows 1:30. Species 35 is absent from these rows. Transform to log
mite.log <- log(mite[1:30,-35]+1)  # Equivalent: log1p(mite[1:30,-35])
# Principal coordinate analysis and simple ordination plot
mite.D <- vegdist(mite.log, "bray")
res <- pcoa(mite.D)
res$values
biplot(res)
# Project unstandardized and standardized species on the PCoA ordination plot
mite.log.st = apply(mite.log, 2, scale, center=TRUE, scale=TRUE)
par(mfrow=c(1,2))
biplot(res, mite.log)
biplot(res, mite.log.st)
# Reverse the ordination axes in the  plot
par(mfrow=c(1,2))
biplot(res, mite.log, dir.axis1=-1, dir.axis2=-1)
biplot(res, mite.log.st, dir.axis1=-1, dir.axis2=-1)
librar
mice
mite
mite$Brachy
?`ape-package`
data(ape)
?ape
library(help = ape)
plot(bird.orders)
data("bird.orders")
plot(bird.orders)
diag(dist(bird.orders))
vcv()
?vcv
vcv(bird.orders)
?cophenetic
qplot(rnorm(1e5,100,10))
