hist(rgamma(1e5,0.8,1))
hist(rgamma(1e5,100,1))
hist(rgamma(1e5,10,1))
hist(rgamma(1e5,5,1))
hist(rgamma(1e5,1,1))
hist(rgamma(1e5,0
,1))
hist(rgamma(1e5,0,1))
hist(rnorm(1e5,0,1))
hist(rgamma(1e5,0,1))
hist(rgamma(1e5,10,1))
hist(rgamma(1e5,1,1))
hist(rgamma(1e5,1,2))
hist(rgamma(1e5,1,5))
hist(rgamma(1e5,1,8))
hist(rgamma(1e5,2,4))
hist(rgamma(1e5,2,3))
hist(rgamma(1e5,2,6))
hist(rgamma(1e5,2,6))
hist(rgamma(1e5,2,6))
hist(rgamma(1e5,100,6))
hist(rgamma(1e5,100,3))
hist(rgamma(1e5,200,3))
hist(rgamma(1e5,200,1))
hist(rgamma(1e5,200,20))
hist(rnorm(1e5,200,20))
hist(rnorm(1e5,30,3))
hist(rnorm(1e5,30,4))
hist(rnorm(1e5,200,20))
hist(rnorm(1e5,20,20))
hist(rnorm(1e5,200,20))
hist(rnorm(1e5,20,20))
hist(rnorm(1e5,2,2))
hist(rgamma(1e5,200,20))
?rgamma
hist(rgamma(1e5,200,20))
hist(rgamma(1e5,60,3))
hist(rgamma(1e5,shape=60,scale=3))
hist(rgamma(1e5,shape=60,scale=3))
60*9
var(rgamma(1e5,shape=60,scale=3))
var(rgamma(10,shape=60,scale=3))
var(rgamma(10,shape=60,scale=3))
hist(rgamma(10,shape=60,scale=3))
hist(rgamma(100,shape=60,scale=3))
hist(rgamma(1000,shape=60,scale=3))
hist(rgamma(10000,shape=60,scale=3))
?crawlWrap
?fitHMM
pc_dive
load("/Users/Ben/Dropbox/Whales/Dive/WhalePhys.RData")
dim(mdat)
sum(is.na(mdat$Longitude))
sum(!is.na(mdat$Longitude))
mdat %>% group_by(Animal) %>% summarize(dives=sum(is.na(Longitude)))
library(tidyr)
library(ggplot2)
library(maptools)
library(shiny)
library(raster)
library(data.table)
library(ggmap)
library(leaflet)
library(dplyr)
library(stringr)
library(chron)
library(jagsUI)
library(boot)
library(knitr)
library(MCMCpack)
library(truncnorm)
newModel=T
opts_chunk$set(echo=F,warning=F,message=F,fig.width=11)
mytheme<-theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank(),axis.title.x=element_blank(),axis.title.y=element_blank(),panel.grid=element_blank())
mdat %>% group_by(Animal) %>% summarize(dives=sum(is.na(Longitude)))
mdat %>% group_by(Animal) %>% summarize(dives=sum(is.na(Longitude))) %>% summarize(mean(dives),sd(dives))
mdat %>% group_by(Animal) %>% summarize(difftime(max(timestamp) - min(timestamp))
mdat %>% group_by(Animal) %>% summarize(difftime(max(timestamp) - min(timestamp)))
mdat %>% group_by(Animal) %>% summarize(t=as.character(difftime(max(timestamp) - min(timestamp))))
mdat %>% group_by(Animal) %>% summarize(t=as.character(difftime(max(timestamp), min(timestamp))))
mdat %>% group_by(Animal) %>% summarize(t=difftime(max(timestamp), min(timestamp)))
mdat %>% group_by(Animal) %>% summarize(t=difftime(max(timestamp), min(timestamp))) %>% summarize(mean(t))
#sum table
pc_dive %>% filter(!parameter %in% c("dive_new","state","eval","sub_state")) %>% group_by(parameter,Behavior,sub_state) %>% summarize(mean=round(mean(value),3),upper=round(quantile(value,0.95),3),lower=round(quantile(value,0.05),3))
head(state_est)
#sum table
pc_dive %>% filter(!parameter %in% c("dive_new","state","eval","sub_state")) %>% group_by(parameter,Behavior,sub_state) %>% summarize(mean=round(mean(value),3),upper=round(quantile(value,0.95),3),lower=round(quantile(value,0.05),3))
ggplot(data=state_est) + geom_boxplot(aes(x=Month,y=DepthMax,fill=Behavior)) + ylab("Maximum Dive Depth (km)")
state_est$Month<-factor(state_est$Month,levels=month.name)
ggplot(data=state_est) + geom_boxplot(aes(x=Month,y=DepthMax,fill=Behavior)) + ylab("Dive Depth (km)")
ggplot(data=state_est) + geom_boxplot(aes(x=Month,y=DepthMax,fill=Behavior)) + ylab("Dive Depth (m)")
ggplot(data=state_est) + geom_density(aes(x=Month,y=DepthMax,fill=Behavior)) + ylab("Dive Depth (m)") + facet_wrap(~Behavior)
ggplot(data=state_est) + geom_density(aes(y=DepthMax,fill=Month)) + ylab("Dive Depth (m)") + facet_wrap(~Behavior)
ggplot(data=state_est) + geom_density(aes(x=DepthMax,fill=Month)) + ylab("Dive Depth (m)") + facet_wrap(~Behavior)
ggplot(data=state_est) + geom_density(aes(x=DepthMax,fill=Month)) + ylab("Dive Depth (m)") + facet_wrap(~Behavior,scale="free")
ggplot(data=state_est) + geom_density(aes(x=DepthMax,fill=Month)) + ylab("Dive Depth (m)") + facet_wrap(~Behavior,scale="free",ncol=1)
state_est$DepthMax
mdat %>% group_by(Month) %>% filter(DepthMax>400) %>% summarize(n=n)
mdat %>% group_by(Month) %>% filter(DepthMax>400) %>% summarize(n=n())
ggplot(byhour,aes(x=LocalHour,y=prop,col=Behavior)) + geom_line()  + geom_point() + theme_bw() + scale_y_continuous("Frequency of Behavior",labels=scales::percent) + labs(x="Hour")
ggsave("Figures/DielFreq.svg",height=6,width=9)
ggsave("Figures/DielFreq.png",height=6,width=9)
install.packages("argosfilter")
library(argosfilter)
library(tidyr)
library(ggplot2)
library(maptools)
library(shiny)
library(raster)
library(data.table)
library(ggmap)
library(leaflet)
library(dplyr)
library(stringr)
library(chron)
library(jagsUI)
library(boot)
library(knitr)
library(MCMCpack)
library(truncnorm)
newModel=T
opts_chunk$set(echo=F,warning=F,message=F,fig.width=11)
mytheme<-theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank(),axis.title.x=element_blank(),axis.title.y=element_blank(),panel.grid=element_blank())
if(!newModel){
load("/Users/Ben/Dropbox/Whales/Dive/WhalePhys.RData")
newModel=F
}
#get gps data
f<-list.files("Data/Humpback",pattern="Locations",full.names=T,recursive = T)
gdat<-lapply(f,function(x) read.csv(x,stringsAsFactors=F))
gdat<-lapply(gdat,function(x){
x$Quality<-as.character(x$Quality)
return(x)
})
gdat<-bind_rows(gdat)
#timestamp
gdat$timestamp<-as.POSIXct(gdat$Date,format="%H:%M:%S %d-%b-%Y",tz="GMT")
#
gdat<-gdat[!is.na(gdat$Latitude),]
#crop by extent
d<-SpatialPointsDataFrame(cbind(gdat$Longitude,gdat$Latitude),data=data.frame(gdat),proj4string=CRS("+proj=longlat +datum=WGS84"))
cropoly<-readShapePoly("Data/CutPolygon.shp",proj4string=CRS("+proj=longlat +datum=WGS84"))
b<-d[!is.na(d %over% cropoly)[,2],]
gdat<-b@data
#get dive data files
f<-list.files("Data/Humpback/",pattern="Behavior",full.names=T,recursive = T)
dat<-bind_rows(lapply(f,read.csv))
dat$timestamp<-as.POSIXct(dat$End,format="%H:%M:%S %d-%b-%Y",tz="GMT")
dat$Month<-months(dat$timestamp)
dat$Month<-factor(dat$Month,levels=month.name)
dat$Hour<-strftime(dat$timestamp,format="%H")
dat$Year<-years(dat$timestamp)
### for testing
gdat<-gdat %>% filter(Ptt %in% unique(dat$Ptt))
gdat<-gdat %>% dplyr::select(Animal=Ptt,timestamp,Quality,Latitude,Longitude)
gdat$Month<-months(gdat$timestamp)
gdat$Month<-factor(gdat$Month,levels=month.name)
dive<-dat %>% filter(What=="Dive")%>% dplyr::select(Animal=Ptt,timestamp,Hour,Month,Year,DepthMax,DepthMin,DurationMax,DurationMin)
dive<-bind_rows(gdat,dive)
#order by timestamp
dive<-dive %>% arrange(timestamp)
mdat<-dive
dat<-read.csv("/Users/ben/Dropbox/Whales/Data/Humpback/2013/03. 2013_WC_DAP/current-hbw-Locations.csv")
library(dplyr)
library(stringr)
library(ggplot2)
dat<-read.csv("/Users/ben/Dropbox/Whales/Data/Humpback/2013/03. 2013_WC_DAP/current-hbw-Locations.csv")
head(dat)
head(dat)
range(dat$Date)
range(as.numeric(dat$Date))
?strptime
as.POSIXct(dat$Date,"%D/%M/%Y %H:M")
as.POSIXct(as.character(dat$Date),format="%D/%M/%Y %H:M")
as.POSIXct(as.character(dat$Date),format="%d/%m/%Y %H:M")
as.character(dat$Date)
as.POSIXct(as.character(dat$Date),format="%d/%m/%Y %H:%M")
as.POSIXct(as.character(dat$Date),format="%d/%m/%Y %H:%M",tz="GMT")
dat$FDate<-as.POSIXct(as.character(dat$Date),format="%d/%m/%Y %H:%M",tz="GMT")
head(dat)
ggplot(dat) + geom_point(aes(x=Date,y=1,col=Ptt))
ggplot(dat) + geom_point(aes(x=FDate,y=1,col=Ptt))
sumdate<-dat %>% group_by(Ptt) %>% summarize(minDate=min(FDate),maxDate=max(FData))
sumdate<-dat %>% group_by(Ptt) %>% summarize(minDate=min(FDate),maxDate=max(FDate))
sumdate
dat %>% mutate(Months=months(FDate)) %>% filter(Ptt=="123232",Months %in% c(2,3,4,5,6))
dat %>% mutate(Months=months(FDate)) %>% filter(Ptt=="123232")
dat %>% mutate(Months=months(FDate)) %>% filter(Ptt=="123232") %>% head()
dat %>% mutate(Months=months(FDate)) %>% filter(Ptt=="123232",!Months %in% c("January","February","March","April","May","June","July")) %>% head()
weird<-dat %>% mutate(Months=months(FDate)) %>% filter(Ptt=="123232",!Months %in% c("January","February","March","April","May","June","July"))
mybbox<-make_bbox(data=weird,lat=Latitude,lon=Longitude,f=0.1)
troy <- get_map(location = mybbox, maptype = "toner-background")
ggmap(troy) + geom_point(data=weird,aes(x=Longitude, y=Latitude,col=as.factor(Months)),size=0.3)
weird<-dat %>% mutate(Months=months(FDate)) %>% filter(Ptt=="123232")
mybbox<-make_bbox(data=weird,lat=Latitude,lon=Longitude,f=0.1)
troy <- get_map(location = mybbox, maptype = "toner-background")
ggmap(troy) + geom_point(data=weird,aes(x=Longitude, y=Latitude,col=as.factor(Months)),size=0.3)
ggmap(troy) + geom_point(data=weird,aes(x=Longitude, y=Latitude,col=as.factor(Months)),size=0.3) + scale_color_brewer(palette = "blues")
ggmap(troy) + geom_point(data=weird,aes(x=Longitude, y=Latitude,col=as.factor(Months)),size=0.3) + scale_color_brewer(palette = "Blues")
weird$Months
levels(weird$Months)
month.name
weird %>% mutate(Months=factor(Months,levels=month.name))
weird<-weird %>% mutate(Months=factor(Months,levels=month.name))
ggmap(troy) + geom_point(data=weird,aes(x=Longitude, y=Latitude,col=as.factor(Months)),size=0.3) + scale_color_brewer(palette = "Blues")
ggmap(troy) + geom_point(data=weird,aes(x=Longitude, y=Latitude,col=as.factor(Months)),size=0.3) + scale_color_brewer(palette = "Blues") + facet_wrap(~Months)
?strptime
sumdate
animals<-data.frame(Animal=c("a","b","c"))
age<-data.frame(Animal=c("b","a","c"),Age=c(10,20,4))
animals
age
merge(animals,age,by=c("Animal"))
animals<-data.frame(Animal=c("a","b","c"))
age<-data.frame(Animal=c("b","a","c","d","e","f"),Age=c(10,20,4,5,3,5))
animals
afe
age
animals<-data.frame(Animal=c("a","b","c"))
age<-data.frame(Animal=c("b","a","c","d","e","f","f"),Age=c(10,20,4,5,3,5,5))
animals
age
?join
animals %>% semi_join(age)
animals
age
animals %>% inner_join(age)
animals<-data.frame(Animal=c("a","b","c","f"))
age<-data.frame(Animal=c("b","a","c","d","e","f","f"),Age=c(10,20,4,5,3,5,5))
animals %>% inner_join(age)
Animals
animals
age
animals %>% inner_join(age)
animals %>% inner_join(age)
m<-animals %>% inner_join(age)
m
m %>% group_by(Animal) %>% distinct()
animals
m %>% distinct()
m %>% group_by(Animal) %>% distinct()
load("/Users/Ben/Dropbox/Whales/Dive/WhalePhys.RData")
fitstat<-pc_dive %>% filter(parameter %in% c("fit","fitnew"))
fitstat<-dcast(fitstat,Draw+chain~parameter,value.var="value")
ymin<-min(c(fitstat$E,fitstat$Enew)) - min(c(fitstat$E,fitstat$Enew)) * .1
fitstat<-pc_dive %>% filter(parameter %in% c("fit","fitnew"))
fitstat
fitstat<-pc_dive %>% filter(parameter %in% c("E","Enew")) %>% group_by(parameter,Draw,chain,jAnimal) %>% summarize(fit=mean(value))
fitstat
fitstat<-pc_dive %>% filter(parameter %in% c("E","Enew")) %>% group_by(parameter,Draw,chain,Animal) %>% summarize(fit=mean(value))
fitstat
#sum table
pc_dive %>% filter(!parameter %in% c("dive_new","state","eval","sub_state")) %>% group_by(parameter,Behavior,sub_state) %>% summarize(mean=round(mean(value),3),upper=round(quantile(value,0.95),3),lower=round(quantile(value,0.05),3))
write.csv("Figures/sumtable.csv",sumtable,row.names = F)
#sum table
sumtable<-pc_dive %>% filter(!parameter %in% c("dive_new","state","eval","sub_state")) %>% group_by(parameter,Behavior,sub_state) %>% summarize(mean=round(mean(value),3),upper=round(quantile(value,0.95),3),lower=round(quantile(value,0.05),3))
write.csv("Figures/sumtable.csv",sumtable,row.names = F)
getwd()
write.csv("Figures/sumtable.csv",sumtable)
write.csv(sumtable"Figures/sumtable.csv",row.names = F)
write.csv(sumtable,"Figures/sumtable.csv",row.names = F)
library(tidyr)
library(ggplot2)
library(maptools)
library(shiny)
library(raster)
library(data.table)
library(ggmap)
library(leaflet)
library(dplyr)
library(stringr)
library(chron)
library(jagsUI)
library(boot)
library(knitr)
library(MCMCpack)
library(truncnorm)
newModel=T
opts_chunk$set(echo=F,warning=F,message=F,fig.width=11)
mytheme<-theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank(),axis.title.x=element_blank(),axis.title.y=element_blank(),panel.grid=element_blank())
load("/Users/Ben/Dropbox/Whales/Dive/WhalePhys.RData")
server <- function(input, output) {
# create a reactive value that will store the click position
data_of_click <- reactiveValues(clickedMarker=NULL)
dat<-mdat %>% filter(Animal=="131130",!is.na(Latitude)) %>% mutate(ID=1:nrow(.))
# Leaflet map with 2 markers
pal<-colorFactor(heat.colors(10),dat$DepthMax)
output$map <- renderLeaflet({
leaflet() %>%
setView(lng=mean(dat$Longitude,na.rm=T), lat =mean(dat$Latitude,na.rm=T), zoom=8) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>% addPolylines(data=dat %>% arrange(Animal,timestamp),~Longitude, ~Latitude,weight=0.25) %>%
addCircleMarkers(data=dat, ~Longitude , ~Latitude, layerId=~ID, popup=~paste(timestamp), radius=3 , fillColor="red", stroke = TRUE, fillOpacity = 0.1)
})
# store the click
observeEvent(input$map_marker_click,{
data_of_click$clickedMarker <- input$map_marker_click
})
# Make a barplot or scatterplot depending of the selected point
output$plot=renderPlot({
my_place=dat[dat$ID %in% data_of_click$clickedMarker$id,]
print(data_of_click$clickedMarker)
print(my_place)
p<-ggplot(mdat[mdat$Animal %in% dat$Animal,],aes(x=timestamp,y=-DepthMax)) + geom_point() + geom_line(size=0.5) + theme_bw()
if(!is.null(my_place)){
p<-p + geom_vline(data=my_place,aes(xintercept=timestamp),size=4,col='red',alpha=0.5)
}
return(p)
})
}
ui <- fluidPage(
br(),
leafletOutput("map", height="600px"),
plotOutput("plot", height="300px"),
br()
)
shinyApp(ui = ui, server = server)
server <- function(input, output) {
# create a reactive value that will store the click position
data_of_click <- reactiveValues(clickedMarker=NULL)
dat<-mdat %>% filter(Animal=="131127",!is.na(Latitude)) %>% mutate(ID=1:nrow(.))
# Leaflet map with 2 markers
pal<-colorFactor(heat.colors(10),dat$DepthMax)
output$map <- renderLeaflet({
leaflet() %>%
setView(lng=mean(dat$Longitude,na.rm=T), lat =mean(dat$Latitude,na.rm=T), zoom=8) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>% addPolylines(data=dat %>% arrange(Animal,timestamp),~Longitude, ~Latitude,weight=0.25) %>%
addCircleMarkers(data=dat, ~Longitude , ~Latitude, layerId=~ID, popup=~paste(timestamp), radius=3 , fillColor="red", stroke = TRUE, fillOpacity = 0.1)
})
# store the click
observeEvent(input$map_marker_click,{
data_of_click$clickedMarker <- input$map_marker_click
})
# Make a barplot or scatterplot depending of the selected point
output$plot=renderPlot({
my_place=dat[dat$ID %in% data_of_click$clickedMarker$id,]
print(data_of_click$clickedMarker)
print(my_place)
p<-ggplot(mdat[mdat$Animal %in% dat$Animal,],aes(x=timestamp,y=-DepthMax)) + geom_point() + geom_line(size=0.5) + theme_bw()
if(!is.null(my_place)){
p<-p + geom_vline(data=my_place,aes(xintercept=timestamp),size=4,col='red',alpha=0.5)
}
return(p)
})
}
ui <- fluidPage(
br(),
leafletOutput("map", height="600px"),
plotOutput("plot", height="300px"),
br()
)
shinyApp(ui = ui, server = server)
server <- function(input, output) {
# create a reactive value that will store the click position
data_of_click <- reactiveValues(clickedMarker=NULL)
dat<-mdat %>% filter(Animal=="131133",!is.na(Latitude)) %>% mutate(ID=1:nrow(.))
# Leaflet map with 2 markers
pal<-colorFactor(heat.colors(10),dat$DepthMax)
output$map <- renderLeaflet({
leaflet() %>%
setView(lng=mean(dat$Longitude,na.rm=T), lat =mean(dat$Latitude,na.rm=T), zoom=8) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>% addPolylines(data=dat %>% arrange(Animal,timestamp),~Longitude, ~Latitude,weight=0.25) %>%
addCircleMarkers(data=dat, ~Longitude , ~Latitude, layerId=~ID, popup=~paste(timestamp), radius=3 , fillColor="red", stroke = TRUE, fillOpacity = 0.1)
})
# store the click
observeEvent(input$map_marker_click,{
data_of_click$clickedMarker <- input$map_marker_click
})
# Make a barplot or scatterplot depending of the selected point
output$plot=renderPlot({
my_place=dat[dat$ID %in% data_of_click$clickedMarker$id,]
print(data_of_click$clickedMarker)
print(my_place)
p<-ggplot(mdat[mdat$Animal %in% dat$Animal,],aes(x=timestamp,y=-DepthMax)) + geom_point() + geom_line(size=0.5) + theme_bw()
if(!is.null(my_place)){
p<-p + geom_vline(data=my_place,aes(xintercept=timestamp),size=4,col='red',alpha=0.5)
}
return(p)
})
}
ui <- fluidPage(
br(),
leafletOutput("map", height="600px"),
plotOutput("plot", height="300px"),
br()
)
shinyApp(ui = ui, server = server)
#One very ugly timestamp
mdat %>% filter('2016-06-20 00:17:35')
#One very ugly timestamp
mdat %>% filter(timestamp=-'2016-06-20 00:17:35')
#One very ugly timestamp
mdat %>% filter(timestamp=='2016-06-20 00:17:35')
head(mdat)
#One very ugly timestamp
mdat %>% filter(timestamp %in% '2016-06-20 00:17:35')
server <- function(input, output) {
# create a reactive value that will store the click position
data_of_click <- reactiveValues(clickedMarker=NULL)
dat<-mdat %>% filter(Animal=="131133",!is.na(Latitude)) %>% mutate(ID=1:nrow(.))
# Leaflet map with 2 markers
pal<-colorFactor(heat.colors(10),dat$DepthMax)
output$map <- renderLeaflet({
leaflet() %>%
setView(lng=mean(dat$Longitude,na.rm=T), lat =mean(dat$Latitude,na.rm=T), zoom=8) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>% addPolylines(data=dat %>% arrange(Animal,timestamp),~Longitude, ~Latitude,weight=0.25) %>%
addCircleMarkers(data=dat, ~Longitude , ~Latitude, layerId=~ID, popup=~paste(timestamp), radius=3 , fillColor="red", stroke = TRUE, fillOpacity = 0.1)
})
# store the click
observeEvent(input$map_marker_click,{
data_of_click$clickedMarker <- input$map_marker_click
})
# Make a barplot or scatterplot depending of the selected point
output$plot=renderPlot({
my_place=dat[dat$ID %in% data_of_click$clickedMarker$id,]
print(data_of_click$clickedMarker)
print(my_place)
p<-ggplot(mdat[mdat$Animal %in% dat$Animal,],aes(x=timestamp,y=-DepthMax)) + geom_point() + geom_line(size=0.5) + theme_bw()
if(!is.null(my_place)){
p<-p + geom_vline(data=my_place,aes(xintercept=timestamp),size=4,col='red',alpha=0.5)
}
return(p)
})
}
ui <- fluidPage(
br(),
leafletOutput("map", height="600px"),
plotOutput("plot", height="300px"),
br()
)
shinyApp(ui = ui, server = server)
#One very ugly timestamp
dive %>% filter(timestamp %in% '2016-06-20 00:17:35')
if(!newModel){
load("/Users/Ben/Dropbox/Whales/Dive/WhalePhys.RData")
newModel=F
}
#get gps data
f<-list.files("Data/Humpback",pattern="Locations",full.names=T,recursive = T)
gdat<-lapply(f,function(x) read.csv(x,stringsAsFactors=F))
gdat<-lapply(gdat,function(x){
x$Quality<-as.character(x$Quality)
return(x)
})
gdat<-bind_rows(gdat)
#timestamp
gdat$timestamp<-as.POSIXct(gdat$Date,format="%H:%M:%S %d-%b-%Y",tz="GMT")
#
gdat<-gdat[!is.na(gdat$Latitude),]
#crop by extent
d<-SpatialPointsDataFrame(cbind(gdat$Longitude,gdat$Latitude),data=data.frame(gdat),proj4string=CRS("+proj=longlat +datum=WGS84"))
cropoly<-readShapePoly("Data/CutPolygon.shp",proj4string=CRS("+proj=longlat +datum=WGS84"))
b<-d[!is.na(d %over% cropoly)[,2],]
gdat<-b@data
#get dive data files
f<-list.files("Data/Humpback/",pattern="Behavior",full.names=T,recursive = T)
dat<-bind_rows(lapply(f,read.csv))
dat$timestamp<-as.POSIXct(dat$End,format="%H:%M:%S %d-%b-%Y",tz="GMT")
dat$Month<-months(dat$timestamp)
dat$Month<-factor(dat$Month,levels=month.name)
dat$Hour<-strftime(dat$timestamp,format="%H")
dat$Year<-years(dat$timestamp)
### for testing
gdat<-gdat %>% filter(Ptt %in% unique(dat$Ptt))
gdat<-gdat %>% dplyr::select(Animal=Ptt,timestamp,Quality,Latitude,Longitude)
gdat$Month<-months(gdat$timestamp)
gdat$Month<-factor(gdat$Month,levels=month.name)
dive<-dat %>% filter(What=="Dive")%>% dplyr::select(Animal=Ptt,timestamp,Hour,Month,Year,DepthMax,DepthMin,DurationMax,DurationMin)
dive<-bind_rows(gdat,dive)
#order by timestamp
dive<-dive %>% arrange(timestamp)
mdat<-dive
#One very ugly timestamp
mdat %>% filter(timestamp %in% '2016-06-20 00:17:35')
table(mdat$Quality)
dim(mdat)
server <- function(input, output) {
# create a reactive value that will store the click position
data_of_click <- reactiveValues(clickedMarker=NULL)
dat<-mdat %>% filter(Animal=="131133",!is.na(Latitude)) %>% mutate(ID=1:nrow(.))
# Leaflet map with 2 markers
pal<-colorFactor(heat.colors(10),dat$DepthMax)
output$map <- renderLeaflet({
leaflet() %>%
setView(lng=mean(dat$Longitude,na.rm=T), lat =mean(dat$Latitude,na.rm=T), zoom=8) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>% addPolylines(data=dat %>% arrange(Animal,timestamp),~Longitude, ~Latitude,weight=0.25) %>%
addCircleMarkers(data=dat, ~Longitude , ~Latitude, layerId=~ID, popup=~paste(timestamp), radius=3 , fillColor="red", stroke = TRUE, fillOpacity = 0.1)
})
# store the click
observeEvent(input$map_marker_click,{
data_of_click$clickedMarker <- input$map_marker_click
})
# Make a barplot or scatterplot depending of the selected point
output$plot=renderPlot({
my_place=dat[dat$ID %in% data_of_click$clickedMarker$id,]
print(data_of_click$clickedMarker)
print(my_place)
p<-ggplot(mdat[mdat$Animal %in% dat$Animal,],aes(x=timestamp,y=-DepthMax)) + geom_point() + geom_line(size=0.5) + theme_bw()
if(!is.null(my_place)){
p<-p + geom_vline(data=my_place,aes(xintercept=timestamp),size=4,col='red',alpha=0.5)
}
return(p)
})
}
ui <- fluidPage(
br(),
leafletOutput("map", height="600px"),
plotOutput("plot", height="300px"),
br()
)
shinyApp(ui = ui, server = server)
#One very ugly timestamp
mdat %>% filter(Latitude %in% '-64.5407')
