setView(lng=mean(dat$Longitude,na.rm=T), lat =mean(dat$Latitude,na.rm=T), zoom=8) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>% addPolylines(data=dat %>% arrange(Animal,timestamp),~Longitude, ~Latitude,weight=0.25) %>%
addCircleMarkers(data=dat, ~Longitude , ~Latitude, layerId=~ID, popup=~paste(timestamp), radius=3 , fillColor="red", stroke = TRUE, fillOpacity = 0.1)
})
# store the click
observeEvent(input$map_marker_click,{
data_of_click$clickedMarker <- input$map_marker_click
})
# Make a barplot or scatterplot depending of the selected point
output$plot=renderPlot({
my_place=data_of_click$clickedMarker$ID
print(data_of_click)
p<-ggplot(mdat[mdat$Animal %in% dat$Animal,],aes(x=timestamp,y=-DepthMax)) + geom_line(size=0.1) + theme_bw() + scale_color_manual(values=c("Black","Red"),guide=F) + scale_size_manual(values=c(0.1,5),guide=F)
if(!is.null(my_place)){
p + geom_vline(data=my_place,aes(xintercept=timestamp),size=2,col='red',alpha=0.5)
}
return(p)
})
}
ui <- fluidPage(
br(),
leafletOutput("map", height="600px"),
plotOutput("plot", height="300px"),
br()
)
shinyApp(ui = ui, server = server)
server <- function(input, output) {
# create a reactive value that will store the click position
data_of_click <- reactiveValues(clickedMarker=NULL)
dat<-mdat %>% filter(Animal=="131130",!is.na(Latitude)) %>% mutate(ID=1:nrow(.))
# Leaflet map with 2 markers
pal<-colorFactor(heat.colors(10),dat$DepthMax)
output$map <- renderLeaflet({
leaflet() %>%
setView(lng=mean(dat$Longitude,na.rm=T), lat =mean(dat$Latitude,na.rm=T), zoom=8) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>% addPolylines(data=dat %>% arrange(Animal,timestamp),~Longitude, ~Latitude,weight=0.25) %>%
addCircleMarkers(data=dat, ~Longitude , ~Latitude, layerId=~ID, popup=~paste(timestamp), radius=3 , fillColor="red", stroke = TRUE, fillOpacity = 0.1)
})
# store the click
observeEvent(input$map_marker_click,{
data_of_click$clickedMarker <- input$map_marker_click
})
# Make a barplot or scatterplot depending of the selected point
output$plot=renderPlot({
my_place=data_of_click$clickedMarker
print(data_of_click)
p<-ggplot(mdat[mdat$Animal %in% dat$Animal,],aes(x=timestamp,y=-DepthMax)) + geom_point() + geom_line(size=0.5) + theme_bw()
if(!is.null(my_place)){
p + geom_vline(data=my_place,aes(xintercept=timestamp),size=2,col='red',alpha=0.5)
}
return(p)
})
}
ui <- fluidPage(
br(),
leafletOutput("map", height="600px"),
plotOutput("plot", height="300px"),
br()
)
shinyApp(ui = ui, server = server)
p<-ggplot(mdat[mdat$Animal %in% dat$Animal,],aes(x=timestamp,y=-DepthMax)) + geom_point() + geom_line(size=0.5) + theme_bw()
p
data_of_click$clickedMarker
server <- function(input, output) {
# create a reactive value that will store the click position
data_of_click <- reactiveValues(clickedMarker=NULL)
dat<-mdat %>% filter(Animal=="131130",!is.na(Latitude)) %>% mutate(ID=1:nrow(.))
# Leaflet map with 2 markers
pal<-colorFactor(heat.colors(10),dat$DepthMax)
output$map <- renderLeaflet({
leaflet() %>%
setView(lng=mean(dat$Longitude,na.rm=T), lat =mean(dat$Latitude,na.rm=T), zoom=8) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>% addPolylines(data=dat %>% arrange(Animal,timestamp),~Longitude, ~Latitude,weight=0.25) %>%
addCircleMarkers(data=dat, ~Longitude , ~Latitude, layerId=~ID, popup=~paste(timestamp), radius=3 , fillColor="red", stroke = TRUE, fillOpacity = 0.1)
})
# store the click
observeEvent(input$map_marker_click,{
data_of_click$clickedMarker <- input$map_marker_click
})
# Make a barplot or scatterplot depending of the selected point
output$plot=renderPlot({
my_place=data_of_click$clickedMarker
print(data_of_click$clickedMarker)
p<-ggplot(mdat[mdat$Animal %in% dat$Animal,],aes(x=timestamp,y=-DepthMax)) + geom_point() + geom_line(size=0.5) + theme_bw()
if(!is.null(my_place)){
p + geom_vline(data=my_place,aes(xintercept=timestamp),size=2,col='red',alpha=0.5)
}
return(p)
})
}
ui <- fluidPage(
br(),
leafletOutput("map", height="600px"),
plotOutput("plot", height="300px"),
br()
)
shinyApp(ui = ui, server = server)
server <- function(input, output) {
# create a reactive value that will store the click position
data_of_click <- reactiveValues(clickedMarker=NULL)
dat<-mdat %>% filter(Animal=="131130",!is.na(Latitude)) %>% mutate(ID=1:nrow(.))
# Leaflet map with 2 markers
pal<-colorFactor(heat.colors(10),dat$DepthMax)
output$map <- renderLeaflet({
leaflet() %>%
setView(lng=mean(dat$Longitude,na.rm=T), lat =mean(dat$Latitude,na.rm=T), zoom=8) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>% addPolylines(data=dat %>% arrange(Animal,timestamp),~Longitude, ~Latitude,weight=0.25) %>%
addCircleMarkers(data=dat, ~Longitude , ~Latitude, layerId=~ID, popup=~paste(timestamp), radius=3 , fillColor="red", stroke = TRUE, fillOpacity = 0.1)
})
# store the click
observeEvent(input$map_marker_click,{
data_of_click$clickedMarker <- input$map_marker_click
})
# Make a barplot or scatterplot depending of the selected point
output$plot=renderPlot({
my_place=dat[dat$ID %in% data_of_click$clickedMarker$ID,]
print(my_place)
p<-ggplot(mdat[mdat$Animal %in% dat$Animal,],aes(x=timestamp,y=-DepthMax)) + geom_point() + geom_line(size=0.5) + theme_bw()
if(!is.null(my_place)){
p + geom_vline(data=my_place,aes(xintercept=timestamp),size=2,col='red',alpha=0.5)
}
return(p)
})
}
ui <- fluidPage(
br(),
leafletOutput("map", height="600px"),
plotOutput("plot", height="300px"),
br()
)
shinyApp(ui = ui, server = server)
server <- function(input, output) {
# create a reactive value that will store the click position
data_of_click <- reactiveValues(clickedMarker=NULL)
dat<-mdat %>% filter(Animal=="131130",!is.na(Latitude)) %>% mutate(ID=1:nrow(.))
# Leaflet map with 2 markers
pal<-colorFactor(heat.colors(10),dat$DepthMax)
output$map <- renderLeaflet({
leaflet() %>%
setView(lng=mean(dat$Longitude,na.rm=T), lat =mean(dat$Latitude,na.rm=T), zoom=8) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>% addPolylines(data=dat %>% arrange(Animal,timestamp),~Longitude, ~Latitude,weight=0.25) %>%
addCircleMarkers(data=dat, ~Longitude , ~Latitude, layerId=~ID, popup=~paste(timestamp), radius=3 , fillColor="red", stroke = TRUE, fillOpacity = 0.1)
})
# store the click
observeEvent(input$map_marker_click,{
data_of_click$clickedMarker <- input$map_marker_click
})
# Make a barplot or scatterplot depending of the selected point
output$plot=renderPlot({
my_place=dat[dat$ID %in% data_of_click$clickedMarker$ID,]
print(clickedMarker)
p<-ggplot(mdat[mdat$Animal %in% dat$Animal,],aes(x=timestamp,y=-DepthMax)) + geom_point() + geom_line(size=0.5) + theme_bw()
if(!is.null(my_place)){
p + geom_vline(data=my_place,aes(xintercept=timestamp),size=2,col='red',alpha=0.5)
}
return(p)
})
}
ui <- fluidPage(
br(),
leafletOutput("map", height="600px"),
plotOutput("plot", height="300px"),
br()
)
shinyApp(ui = ui, server = server)
server <- function(input, output) {
# create a reactive value that will store the click position
data_of_click <- reactiveValues(clickedMarker=NULL)
dat<-mdat %>% filter(Animal=="131130",!is.na(Latitude)) %>% mutate(ID=1:nrow(.))
# Leaflet map with 2 markers
pal<-colorFactor(heat.colors(10),dat$DepthMax)
output$map <- renderLeaflet({
leaflet() %>%
setView(lng=mean(dat$Longitude,na.rm=T), lat =mean(dat$Latitude,na.rm=T), zoom=8) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>% addPolylines(data=dat %>% arrange(Animal,timestamp),~Longitude, ~Latitude,weight=0.25) %>%
addCircleMarkers(data=dat, ~Longitude , ~Latitude, layerId=~ID, popup=~paste(timestamp), radius=3 , fillColor="red", stroke = TRUE, fillOpacity = 0.1)
})
# store the click
observeEvent(input$map_marker_click,{
data_of_click$clickedMarker <- input$map_marker_click
})
# Make a barplot or scatterplot depending of the selected point
output$plot=renderPlot({
my_place=dat[dat$ID %in% data_of_click$clickedMarker$ID,]
print(data_of_click$clickedMarker)
p<-ggplot(mdat[mdat$Animal %in% dat$Animal,],aes(x=timestamp,y=-DepthMax)) + geom_point() + geom_line(size=0.5) + theme_bw()
if(!is.null(my_place)){
p + geom_vline(data=my_place,aes(xintercept=timestamp),size=2,col='red',alpha=0.5)
}
return(p)
})
}
ui <- fluidPage(
br(),
leafletOutput("map", height="600px"),
plotOutput("plot", height="300px"),
br()
)
shinyApp(ui = ui, server = server)
server <- function(input, output) {
# create a reactive value that will store the click position
data_of_click <- reactiveValues(clickedMarker=NULL)
dat<-mdat %>% filter(Animal=="131130",!is.na(Latitude)) %>% mutate(ID=1:nrow(.))
# Leaflet map with 2 markers
pal<-colorFactor(heat.colors(10),dat$DepthMax)
output$map <- renderLeaflet({
leaflet() %>%
setView(lng=mean(dat$Longitude,na.rm=T), lat =mean(dat$Latitude,na.rm=T), zoom=8) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>% addPolylines(data=dat %>% arrange(Animal,timestamp),~Longitude, ~Latitude,weight=0.25) %>%
addCircleMarkers(data=dat, ~Longitude , ~Latitude, popup=~paste(timestamp), radius=3 , fillColor="red", stroke = TRUE, fillOpacity = 0.1)
})
# store the click
observeEvent(input$map_marker_click,{
data_of_click$clickedMarker <- input$map_marker_click
})
# Make a barplot or scatterplot depending of the selected point
output$plot=renderPlot({
my_place=dat[dat$ID %in% data_of_click$clickedMarker$ID,]
print(data_of_click$clickedMarker)
p<-ggplot(mdat[mdat$Animal %in% dat$Animal,],aes(x=timestamp,y=-DepthMax)) + geom_point() + geom_line(size=0.5) + theme_bw()
if(!is.null(my_place)){
p + geom_vline(data=my_place,aes(xintercept=timestamp),size=2,col='red',alpha=0.5)
}
return(p)
})
}
ui <- fluidPage(
br(),
leafletOutput("map", height="600px"),
plotOutput("plot", height="300px"),
br()
)
shinyApp(ui = ui, server = server)
server <- function(input, output) {
# create a reactive value that will store the click position
data_of_click <- reactiveValues(clickedMarker=NULL)
dat<-mdat %>% filter(Animal=="131130",!is.na(Latitude)) %>% mutate(ID=1:nrow(.))
# Leaflet map with 2 markers
pal<-colorFactor(heat.colors(10),dat$DepthMax)
output$map <- renderLeaflet({
leaflet() %>%
setView(lng=mean(dat$Longitude,na.rm=T), lat =mean(dat$Latitude,na.rm=T), zoom=8) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>% addPolylines(data=dat %>% arrange(Animal,timestamp),~Longitude, ~Latitude,weight=0.25) %>%
addCircleMarkers(data=dat, ~Longitude , ~Latitude, layerId=~ID, popup=~paste(timestamp), radius=3 , fillColor="red", stroke = TRUE, fillOpacity = 0.1)
})
# store the click
observeEvent(input$map_marker_click,{
data_of_click$clickedMarker <- input$map_marker_click
})
# Make a barplot or scatterplot depending of the selected point
output$plot=renderPlot({
my_place=dat[dat$ID %in% data_of_click$clickedMarker$id,]
print(data_of_click$clickedMarker)
p<-ggplot(mdat[mdat$Animal %in% dat$Animal,],aes(x=timestamp,y=-DepthMax)) + geom_point() + geom_line(size=0.5) + theme_bw()
if(!is.null(my_place)){
p + geom_vline(data=my_place,aes(xintercept=timestamp),size=2,col='red',alpha=0.5)
}
return(p)
})
}
ui <- fluidPage(
br(),
leafletOutput("map", height="600px"),
plotOutput("plot", height="300px"),
br()
)
shinyApp(ui = ui, server = server)
server <- function(input, output) {
# create a reactive value that will store the click position
data_of_click <- reactiveValues(clickedMarker=NULL)
dat<-mdat %>% filter(Animal=="131130",!is.na(Latitude)) %>% mutate(ID=1:nrow(.))
# Leaflet map with 2 markers
pal<-colorFactor(heat.colors(10),dat$DepthMax)
output$map <- renderLeaflet({
leaflet() %>%
setView(lng=mean(dat$Longitude,na.rm=T), lat =mean(dat$Latitude,na.rm=T), zoom=8) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>% addPolylines(data=dat %>% arrange(Animal,timestamp),~Longitude, ~Latitude,weight=0.25) %>%
addCircleMarkers(data=dat, ~Longitude , ~Latitude, layerId=~ID, popup=~paste(timestamp), radius=3 , fillColor="red", stroke = TRUE, fillOpacity = 0.1)
})
# store the click
observeEvent(input$map_marker_click,{
data_of_click$clickedMarker <- input$map_marker_click
})
# Make a barplot or scatterplot depending of the selected point
output$plot=renderPlot({
my_place=dat[dat$ID %in% data_of_click$clickedMarker$id,]
print(data_of_click$clickedMarker)
print(my_place)
p<-ggplot(mdat[mdat$Animal %in% dat$Animal,],aes(x=timestamp,y=-DepthMax)) + geom_point() + geom_line(size=0.5) + theme_bw()
if(!is.null(my_place)){
p + geom_vline(data=my_place,aes(xintercept=timestamp),size=2,col='red',alpha=0.5)
}
return(p)
})
}
ui <- fluidPage(
br(),
leafletOutput("map", height="600px"),
plotOutput("plot", height="300px"),
br()
)
shinyApp(ui = ui, server = server)
p + geom_vline(data=my_place,aes(xintercept=timestamp),size=2,col='red',alpha=0.5)
my_place<-dat[13,]
print(my_place)
p<-ggplot(mdat[mdat$Animal %in% dat$Animal,],aes(x=timestamp,y=-DepthMax)) + geom_point() + geom_line(size=0.5) + theme_bw()
p + geom_vline(data=my_place,aes(xintercept=timestamp),size=2,col='red',alpha=0.5)
p<-p + geom_vline(data=my_place,aes(xintercept=timestamp),size=6,col='red',alpha=0.5)
p
server <- function(input, output) {
# create a reactive value that will store the click position
data_of_click <- reactiveValues(clickedMarker=NULL)
dat<-mdat %>% filter(Animal=="131130",!is.na(Latitude)) %>% mutate(ID=1:nrow(.))
# Leaflet map with 2 markers
pal<-colorFactor(heat.colors(10),dat$DepthMax)
output$map <- renderLeaflet({
leaflet() %>%
setView(lng=mean(dat$Longitude,na.rm=T), lat =mean(dat$Latitude,na.rm=T), zoom=8) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>% addPolylines(data=dat %>% arrange(Animal,timestamp),~Longitude, ~Latitude,weight=0.25) %>%
addCircleMarkers(data=dat, ~Longitude , ~Latitude, layerId=~ID, popup=~paste(timestamp), radius=3 , fillColor="red", stroke = TRUE, fillOpacity = 0.1)
})
# store the click
observeEvent(input$map_marker_click,{
data_of_click$clickedMarker <- input$map_marker_click
})
# Make a barplot or scatterplot depending of the selected point
output$plot=renderPlot({
my_place=dat[dat$ID %in% data_of_click$clickedMarker$id,]
print(data_of_click$clickedMarker)
print(my_place)
p<-ggplot(mdat[mdat$Animal %in% dat$Animal,],aes(x=timestamp,y=-DepthMax)) + geom_point() + geom_line(size=0.5) + theme_bw()
if(!is.null(my_place)){
p<-p + geom_vline(data=my_place,aes(xintercept=timestamp),size=4,col='red',alpha=0.5)
}
return(p)
})
}
ui <- fluidPage(
br(),
leafletOutput("map", height="600px"),
plotOutput("plot", height="300px"),
br()
)
shinyApp(ui = ui, server = server)
source('~/Documents/WhalePhys/Bayesian/NestedDive.R')
source('~/Documents/WhalePhys/Bayesian/NestedDive.R')
source('~/Documents/WhalePhys/Bayesian/NestedDive.R')
#gamma prior
# Specify desired mode and sd of gamma distribution:
mode = 150
sd = 20
# Here are the corresponding rate and shape parameter values:
ra = ( mode + sqrt( mode^2 + 4*sd^2 ) ) / ( 2 * sd^2 )
sh = 1 + mode * ra
show(sh)
show(ra)
# Graph it:
x = seq(0,mode+5*sd,len=1001)
plot( x , dgamma( x , shape=sh , rate=ra ) , type="l" ,
main=paste("dgamma, mode=",mode,", sd=",sd,sep="") ,
ylab=paste("dgamma( shape=",signif(sh,3)," , rate=",signif(ra,3)," )",
sep="") )
abline( v=mode , lty="dotted" )
source('~/Documents/WhalePhys/Bayesian/NestedDive.R')
source('~/Documents/WhalePhys/Bayesian/NestedDive.R')
ggplot(state_est %>% filter(!is.na(DepthMax)),aes(x=timestamp,y=-DepthMax,col=state,group=step)) + geom_point() + geom_line(size=0.25,aes(group=Track)) + facet_wrap(~Animal,scales="free",ncol=1) + theme_bw()
ggplot(state_est %>% filter(!is.na(DepthMax)),aes(x=timestamp,y=-DepthMax,col=as.factor(state),group=step)) + geom_point() + geom_line(size=0.25,aes(group=Track)) + facet_wrap(~Animal,scales="free",ncol=1) + theme_bw()
load("/Users/Ben/Dropbox/Whales/Dive/WhalePhys.RData")
ggplot(state_est %>% filter(!is.na(DepthMax)),aes(x=timestamp,y=-DepthMax,col=as.factor(state),group=step)) + geom_point() + geom_line(size=0.25,aes(group=Track)) + facet_wrap(~Animal,scales="free",ncol=1) + theme_bw()
ggplot(state_est %>% filter(!is.na(DepthMax)),aes(x=timestamp,y=-DepthMax,col=as.factor(state),group=step)) + geom_point() + geom_line(size=0.25,aes(group=Track)) + facet_wrap(~Animal,scales="free",ncol=1) + theme_bw()
sqrt(1/0.0001)
source('~/Documents/WhalePhys/Bayesian/NestedDive.R')
source('~/Documents/WhalePhys/Bayesian/NestedDive.R')
source('~/Documents/WhalePhys/Bayesian/NestedDive.R')
source('~/Documents/WhalePhys/Bayesian/NestedDive.R', echo=TRUE)
source('~/Documents/WhalePhys/Bayesian/NestedDive.R')
ggmap(troy) + geom_point(data=mdat,aes(x=Longitude, y=Latitude,col=as.factor(Animal)),size=0.1) + theme_bw() + mytheme
ggmap(troy) + geom_point(data=mdat,aes(x=Longitude, y=Latitude,col=as.factor(Animal)),size=0.1)  + mytheme
ggmap(troy) + geom_point(data=mdat,aes(x=Longitude, y=Latitude,col=as.factor(Animal)),size=0.1)  + mytheme + scale_color_discrete(guide=F)
ggplot(dive[,],aes(x=timestamp,y=-DepthMax)) + geom_point(size=0.1) + geom_line(size=0.1) + facet_wrap(~Animal,scales="free",ncol=2) + theme_bw()
ggplot(dive[,],aes(x=timestamp,y=DepthMax)) + geom_point(size=0.1) + geom_line(size=0.1) + facet_wrap(~Animal,scales="free",ncol=2) + theme_bw() + labs(x="Date",y="Dive Depth (m)") + scale_y_reverse()
ggsave("Figures/perindividual.jpeg",height=5,width=13)
ggsave("Figures/perindividual.svg",height=5,width=13)
ggsave("Figures/perindividual.jpeg",height=12,width=13)
ggsave("Figures/perindividual.svg",height=12,width=13)
ggmap(troy) + geom_point(data=mdat,aes(x=Longitude, y=Latitude,col=as.factor(Animal)),size=0.1)  + mytheme + scale_color_discrete(guide=F)
ggsave("Figures/Map.svg")
ggsave("Figures/Map.png")
ggmap(troy) + geom_point(data=mdat,aes(x=Longitude, y=Latitude,col=as.factor(Animal)),size=0.3)  + mytheme + scale_color_discrete(guide=F)
ggsave("Figures/Map.png")
ggsave("Figures/Map.png",height=6,width=6)
ggsave("Figures/Map.png",height=6,width=8)
ggmap(troy) + geom_point(data=mdat,aes(x=Longitude, y=Latitude,col=as.factor(Animal)),size=0.3)  + mytheme
ggsave("Figures/Map.png",height=6,width=8)
ggmap(troy) + geom_point(data=mdat,aes(x=Longitude, y=Latitude,col=as.factor(Animal)),size=0.3)  + mytheme + labs(col="Animal")
ggsave("Figures/Map.png",height=6,width=8)
ggplot(state_est %>% filter(!is.na(DepthMax)),aes(x=timestamp,y=DepthMax,col=Behavior,group=Track)) + geom_point() + geom_line(size=0.1,aes(group=Track)) + facet_wrap(~Animal,scales="free",ncol=1) + theme_bw() + scale_y_reverse() + labs(x="Date",y="Dive Depth (m)")
ggsave("Figures/TemporalBehavior.jpeg",height=7,width=10)
install.packages("momentuHMM")
library(movementuHMM)
library(momentuHMM)
URL <- paste0("https://www.datarepository.movebank.org/bitstream/handle/",
"10255/move.373/Elliptical%20Time-Density%20Model%20%28Wall%",
"20et%20al.%202014%29%20African%20Elephant%20Dataset%20%",
"28Source-Save%20the%20Elephants%29.csv")
rawData <- read.csv(url(URL))
rawData <- rawData[,c(11,3,4,5,6)]
colnames(rawData) <- c("ID","time","lon","lat","temp")
rawData <- subset(rawData,ID==unique(ID)[1])
head(rawData)
rawData$time <- as.POSIXct(rawData$time,tz="GMT")
llcoord <- SpatialPoints(rawData[,3:4],
proj4string=CRS("+proj=longlat +datum=WGS84"))
library(rgdal)
rawData$time <- as.POSIXct(rawData$time,tz="GMT")
llcoord <- SpatialPoints(rawData[,3:4],
proj4string=CRS("+proj=longlat +datum=WGS84"))
utmcoord <- spTransform(llcoord,CRS("+proj=utm +zone=30 ellps=WGS84"))
rawData$x <- attr(utmcoord,"coords")[,1]
rawData$y <- attr(utmcoord,"coords")[,2]
inits <- list(a = c(rawData$x[1],0,rawData$y[1],0),
P = diag(c(5000^2, 10*3600^2, 5000^2, 10*3600^2)))
?crawlWrap
matrix(nrow=2,ncol=2)
a<-matrix(nrow=2,ncol=2)
a
a[1,1]<-0
a[2,2]<-0
a
diag(a)<-2
a
?iag
?diag
inits <- list(a = c(rawData$x[1],0,rawData$y[1],0),
P = diag(c(5000^2, 10*3600^2, 5000^2, 10*3600^2)))
crwOut <- crawlWrap(obsData=rawData, timeStep="hour", initial.state=inits,
theta=c(4,-10), fixPar=c(NA,NA))
plot(crwOut)
plot(crwOut)
head(rawData)
utmcoord
utmcoord@coords
?attr
attr(utmcoord,"coords")
head(attr(utmcoord,"coords"))
attr(utmcoord,"coords")[,1]
head( attr(utmcoord,"coords"))
head( attr(utmcoord,"coords"))[,1]
utmcoord@coords
head(utmcoord@coords[,1])
head(utmcoord@coords[,2])
rawData$newcolumn<-2
head(rawData)
rawData %>% mutate(dplyrnew=3)
rawData %>% mutate(dplyrnew=3)
library(dplyr)
rawData %>% mutate(dplyrnew=3)
rawData %>% mutate(dplyrnew=3) %>% head()
elephantData <- prepData(data=crwOut, covNames="temp")
plot(elephantData)
elephantData
summary(elephantData)
elephantData$hour <- as.integer(strftime(elephantData$time, format = "%H", tz="GMT"))
acf(elephantData$step[!is.na(elephantData$step)],lag.max=300)
?Acf
?acf
acf(elephantData$step[!is.na(elephantData$step)],lag.max=300)
acf(elephantData$step,lag.max=300)
acf(elephantData$step)
elephantData$step
elephantData$step
elephantData$step[1]
elephantData$step[2]
elephantData$step[11]
elephantData$step[1]
elephantData$step[300]
?Cauchy
hist(rcauchy(100,location=0,scale=1))
hist(rcauchy(100,location=0,scale=1))
hist(rcauchy(100,location=0,scale=1))
hist(rcauchy(100,location=0,scale=1))
hist(rcauchy(1e5,location=0,scale=1))
hist(rcauchy(1e5,location=0,scale=1))
hist(rcauchy(1e5,location=0,scale=1))
hist(rcauchy(1e5,location=0,scale=1))
hist(rcauchy(1e5,location=0,scale=1))
hist(rcauchy(1e5,location=0,scale=1))
hist(rcauchy(1e5,location=0,scale=1))
hist(rnorm(1e5,mu=0,sd=1))
hist(rnorm(1e5,0,1))
hist(rnorm(1e5,0,1))
hist(rnorm(1e5,0,1))
hist(rnorm(1e5,0,1))
hist(rnorm(1e5,0,1))
hist(rnorm(1e5,0,10))
hist(rnorm(1e5,0,5))
hist(rpois(1e5,7))
hist(rpois(1e5,7))
hist(rpois(1e5,10))
hist(rnorm(1e5,mu=0,sd=1))
stateNames <- c("encamped","exploratory")
dist = list(step = "gamma", angle = "wrpcauchy")
Par0_m1 <- list(step=c(100,500,100,200),angle=c(0.3,0.7))
m1 <- fitHMM(data = elephantData, nbStates = 2, dist = dist, Par0 = Par0_m1,
estAngleMean = list(angle=FALSE), stateNames = stateNames)
cosinor
plot(m1)
formula <- ~ temp * cosinor(hour, period = 24)
Par0_m2 <- getPar0(model=m1, formula=formula)
m2 <- fitHMM(data = elephantData, nbStates = 2, dist = dist, Par0 = Par0_m2$Par,
beta0=Par0_m2$beta, stateNames = stateNames, formula=formula)
plot(m2)
