mdat$argos.lc<-factor(mdat$Quality,levels=c(3,2,1,0,"A","B"))
mdat$numargos<-as.numeric(mdat$argos.lc)
obs_class<-reshape2::acast(mdat,Animal~Track~step~jStep,value.var="numargos",fun.aggregate = min)
obs_class[!is.finite(obs_class)]<-NA
#average dive depth array
maxdive<-reshape2::acast(mdat,Animal~Track~step,value.var="DepthMax",fun.aggregate = mean)
#fill the empty values
maxdive[!is.finite(maxdive)]<-NA
#source jags file
source("Bayesian/Diving.R")
#prior cov shape
R <- diag(c(1,1))
data=list(dive=maxdive,argos=obs,steps=steps,R=R,ind=ind,j=j,idx=idx,tracks=tracks,argos_class=obs_class)
#paramters to track
pt<-c("alpha","beta","state")
if(newModel){
system.time(diving<-jags.parallel(model.file = "Bayesian/Diving.jags",data=data,n.chains=2,parameters.to.save=pt,n.iter=100,n.burnin=0,n.thin=2,DIC=FALSE))
}
#bind chains
pc_dive<-reshape2::melt(diving$BUGSoutput$sims.array)
colnames(pc_dive)<-c("Draw","chain","par","value")
#extract parameter name
pc_dive$parameter<-data.frame(str_match(pc_dive$par,"(\\w+)"))[,-1]
#Extract index
splitpc<-split(pc_dive,pc_dive$parameter)
#single index
splitpc[c("alpha")]<-lapply(splitpc[c("alpha")],function(x){
sv<-data.frame(str_match(x$par,"(\\w+)\\[(\\d+)]"))[,3]
pc<-data.frame(x,Behavior=sv)
return(pc)
})
#3 index
splitpc[c("state")]<-lapply(splitpc[c("state")],function(x){
sv<-data.frame(str_match(x$par,"(\\w+)\\[(\\d+),(\\d+),(\\d+)"))[,3:5]
colnames(sv)<-c("Animal","Track","step")
pc<-data.frame(x,sv)
return(pc)
})
#bind all matrices back together
pc_dive<-bind_rows(splitpc)
rm(splitpc)
ggplot(pc_dive[!pc_dive$parameter %in% c("state"),],aes(x=Draw,y=value,col=as.factor(chain))) + geom_line() + facet_wrap(~par,scales="free")
alpha<-pc_dive %>% filter(parameter=="alpha")
alpha$Behavior<-as.character(alpha$Behavior)
alpha$Behavior[alpha$Behavior=="1"]<-"Traveling->Traveling"
alpha$Behavior[alpha$Behavior=="2"]<-"Foraging->Traveling"
ggplot(alpha,aes(x=value)) + geom_histogram() + facet_wrap(~Behavior) + labs(x="Probability of Transition")
#label previous and prediction state, treat traveling as a success and foraging as a failure in a binomial trial
alpha[alpha$Behavior=="Traveling->Traveling","Previous_State"]<-1
alpha[alpha$Behavior=="Foraging->Traveling","Previous_State"]<-0
write.csv(alpha,"Data/Alpha.csv",row.names=F)
foraging_time<-function(alpha,draws,step){
states<-c()
#initial state is traveling
states[1]<-(1)
for(x in 2:draws){
#probability of staying, or switching, to traveling state
travel_prob=alpha %>% filter(Previous_State==states[x-1]) %>% sample_n(1) %>% .$value
#pick next state
states[x]<-rbinom(1,1,travel_prob)
}
#total hours of foraging
total_foraging<-sum(states==0) * step
return(total_foraging)
}
states<-foraging_time(alpha=alpha,draw=20,step=12)
test_time<-sapply(1:1000,function(x){
foraging_time(alpha=alpha,draw=20,step=12)
})
load("/Users/Ben/Dropbox/Whales/Dive/WhalePhys.RData")
library(tidyr)
library(ggplot2)
library(maptools)
library(raster)
library(data.table)
library(dplyr)
library(stringr)
library(chron)
library(R2jags)
library(boot)
library(knitr)
library(truncnorm)
newModel=T
opts_chunk$set(echo=F,warning=F,message=F,fig.width=11)
mytheme<-theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank(),axis.title.x=element_blank(),axis.title.y=element_blank(),panel.grid=element_blank())
load("/Users/Ben/Dropbox/Whales/Dive/WhalePhys.RData")
ggplot(allmodels)+geom_path(aes(x=Longitude, y=Latitude,group=paste(Animal,Track)),size=.25) + geom_point(aes(x=Longitude, y=Latitude,col=Mismatch))+ borders(fill="grey90") + coord_cartesian(ylim = range(mdat$Latitude),xlim=range(mdat$Longitude)) + theme_bw() + mytheme + scale_color_manual(values=c("Black","Red"))
ggsave("Figures/Mismatch2.jpg",height=4,width=7)
ggplot(allmodels)+geom_path(aes(x=Longitude, y=Latitude,group=paste(Animal,Track)),size=.25) + geom_point(aes(x=Longitude, y=Latitude,col=Mismatch))+ borders(fill="grey90") + coord_cartesian(ylim = range(mdat$Latitude),xlim=range(mdat$Longitude)) + theme_bw() + mytheme + scale_color_manual(values=c("Black","Red"))
ggsave("Figures/Mismatch2.jpg",height=4,width=7)
#Take the most common estimate of behavior
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
#Combine posterior summary
mdat$Animal<-as.factor(mdat$Animal)
mdat$Track<-as.factor(mdat$Track)
mdat$step<-as.factor(mdat$step)
state_est2d<-pc_dive2d %>% group_by(Animal,Track,step) %>% filter(parameter=="state") %>% summarize(Behavior =Mode(value)) %>% inner_join(mdat)
state_est2d[state_est2d$Behavior==1,"Behavior"]<-"Traveling"
state_est2d[state_est2d$Behavior==2,"Behavior"]<-"Foraging"
state_est$Model<-"3D"
state_est2d$Model<-"2D"
allmodels<-bind_rows(state_est,state_est2d)
ggplot(data=allmodels)+geom_path(aes(x=Longitude, y=Latitude,group=paste(Animal,Track)),size=0.5) + geom_point(aes(x=Longitude, y=Latitude,col=Behavior),size=0.5)+ borders(fill="grey90") + coord_cartesian(ylim = range(mdat$Latitude),xlim=range(mdat$Longitude)) + theme_bw() + mytheme  + facet_wrap(~Model)
ggsave("Figures/SpatialPred.jpg",height=4,width=7)
allmodels<-spread(allmodels,Model,Behavior)
allmodels$Mismatch<-F
allmodels[allmodels$`2D`=="Traveling" & allmodels$`3D`=="Foraging","Mismatch"]<-TRUE
ggplot(allmodels)+geom_path(aes(x=Longitude, y=Latitude,group=paste(Animal,Track)),size=.25) + geom_point(aes(x=Longitude, y=Latitude,col=Mismatch))+ borders(fill="grey90") + coord_cartesian(ylim = range(mdat$Latitude),xlim=range(mdat$Longitude)) + theme_bw() + mytheme + scale_color_manual(values=c("Black","Red"))
ggsave("Figures/Mismatch1.jpg",height=4,width=7)
ggplot(pc_dive[!pc_dive$parameter %in% c("dive_new","state","E","Enew","eval"),],aes(x=Draw,y=value,col=as.factor(chain))) + geom_line() + facet_wrap(~par,scales="free")
1/sqrt(0.0001)
rnorm(1e5,0.05,1/sqrt(1000))
qplot(rnorm(1e5,0.05,1/sqrt(1000)))
qplot(rnorm(1e5,0.05,1/sqrt(1000))+runif(0,60))
qplot(rnorm(1e5,0.05,1/sqrt(1000))+runif(1e5,0,60))
qplot(rnorm(1e5,0.05,1/sqrt(1000))+runif(1e5,0.05,60))
qplot(rnorm(1e5,0.05,1/sqrt(1000))+runif(1e5,0.05,0.5))
dive[3,1,12,6]
library(tidyr)
library(ggplot2)
library(maptools)
library(raster)
library(data.table)
library(dplyr)
library(stringr)
library(chron)
library(R2jags)
library(boot)
library(knitr)
library(truncnorm)
newModel=T
opts_chunk$set(echo=F,warning=F,message=F,fig.width=11)
mytheme<-theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank(),axis.title.x=element_blank(),axis.title.y=element_blank(),panel.grid=element_blank())
if(!newModel){
load("/Users/Ben/Dropbox/Whales/Dive/WhalePhys.RData")
newModel=F
}
#get gps data
f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback",pattern="Locations",full.names=T,recursive = T)
#just grab five individuals for now
gdat<-lapply(f,function(x) read.csv(x,stringsAsFactors=F))
gdat<-lapply(gdat,function(x){
x$Quality<-as.character(x$Quality)
return(x)
})
gdat<-bind_rows(gdat)
#timestamp
gdat$Date<-as.POSIXct(gdat$Date,format="%H:%M:%S %d-%b-%Y",tz="Etc/GMT+3")
#get dive data files
f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback/",pattern="Behavior",full.names=T,recursive = T)
dat<-bind_rows(lapply(f,read.csv))
#TODO convert histos.csv to usable dive data?
# f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback/2017",pattern="Histos",full.names=T,recursive = T)
# hdat<-bind_rows(lapply(f,read.csv))
# hdat<-hdat %>% filter(HistType=="DiveDepth") %>% dplyr::select(Animal=Ptt,Date,Bin1,Bin2,Bin3,Bin4,Bin5,Bin6,Bin7,Bin8,Bin9)
#
# #gather and replace with meters
# colnames(hdat)[c(-1,-2)]<-c(10,20,50,100,150,200,300,400,500)
#
# hdat<-gather(hdat,Animal,Date)
# colnames(hdat)<-c("Animal","Date","Bin","value")
# hdat$Bin<-as.numeric(hdat$Bin)
#For each animal at each time, highest non-zero bin
#hdat %>% group_by(Animal,Date) %>% filter(!value==0) %>% summarize(max(Bin))
dat$GMTtime<-as.POSIXct(dat$End,format="%H:%M:%S %d-%b-%Y",tz="Etc/GMT+3")
#local time
dat$timestamp<-as.POSIXct(format(dat$GMTtime,tz="Etc/GMT+3"))
dat$Month<-months(dat$timestamp)
dat$Month<-factor(dat$Month,levels=month.name)
dat$Hour<-strftime(dat$timestamp,format="%H")
dat$Year<-years(dat$timestamp)
#create unique messages
indices<-which(dat$What=="Message")
counter=1
dat$ID<-NA
for (x in 1:(length(indices)-1)){
dat[indices[x]:indices[x+1],"ID"]<-counter
counter=counter+1
}
dive<-dat %>% filter(What=="Dive")%>% dplyr::select(Animal=Ptt,timestamp,Hour,Month,Year, ID,Start,DepthMax,DepthMin,DurationMax,DurationMin)
dive<-dive[!is.na(dive$Month),]
#remove duplicate data
dive<-dive %>% arrange(Animal,timestamp)
dive<-dive[!duplicated(dive),]
ggsave("Figures/perindividual.jpeg",height=6,width=12)
ggplot(dive,aes(x=timestamp,y=-DepthMax)) + geom_point(size=0.1) + geom_line(size=0.1) + facet_wrap(~Animal,scales="free") + theme_bw()
##Merge with geographic data and format for JAGS
messages<-dat %>% filter(dat$What=="Message")
messages$timestamp<-as.POSIXct(messages$End,format="%H:%M:%S %d-%b-%Y",tz="Etc/GMT+3")
#look up the time interval that best fits
setDT(gdat)            ## convert to data.table by reference
setDT(messages)            ## same
setkey(messages, Ptt,timestamp)    ## set the column to perform the join on
setkey(gdat,Ptt, Date)    ## same as above
ans = gdat[messages, roll=Inf] ## perform rolling join
ans<-as.data.frame(ans)
message_join<-ans %>% dplyr::select(Date,Animal=Ptt,Date,Quality,Latitude,Longitude,ID)
mdat<-merge(dat,message_join,by="ID")
mdat<-mdat %>% filter(What=="Dive")
#The maxiumum dive depth based on the geographic message
mdat<-mdat %>% dplyr::select(ID,Animal,Latitude,Longitude,timestamp,Date,Month,Hour,Year,DepthMax,DurationMax,DurationMin,Quality)
mdat<-mdat %>% group_by(ID,Animal) %>% slice(which.max(DepthMax)) %>% arrange(Animal,timestamp) %>% filter(!is.na(Latitude))
#crop by extent
d<-SpatialPointsDataFrame(cbind(mdat$Longitude,mdat$Latitude),data=data.frame(mdat),proj4string=CRS("+proj=longlat +datum=WGS84"))
cropoly<-readShapePoly("Data/CutPolygon.shp",proj4string=CRS("+proj=longlat +datum=WGS84"))
b<-d[!is.na(d %over% cropoly)[,2],]
mdat<-b@data
mdat %>% group_by(Animal) %>% summarize(n=n())
nrow(mdat)
#set max depth to km
mdat$DepthMax<-mdat$DepthMax/1000
#set duration to minutes
mdat$DurationMax<-mdat$DurationMax/60
#view data
ggplot(data=mdat)+geom_path(aes(x=Longitude, y=Latitude,group=Animal),size=.5) + geom_point(aes(x=Longitude, y=Latitude,col=DepthMax))+ borders(fill="grey90") + coord_cartesian(ylim = range(mdat$Latitude),xlim=range(mdat$Longitude)) + theme_bw() + mytheme + scale_color_continuous(low="blue",high="red") + labs(col="Max Dive Depth (km)")
ggsave("Figures/Map.svg")
ggsave("Figures/Map.png")
##Time is the beginning of the first point.
step_length=6
sxy<-split(mdat,mdat$Animal)
#time diff function
timed<-function(d,step_length){
d$j[1]<-0
for (x in 2:nrow(d)){
d$j[x]<-as.numeric(difftime(as.POSIXct(d$timestamp[x]),as.POSIXct(d$timestamp[x-1]),units="mins"))/(step_length*60)
}
#Split out track endings
ends<-c(1,which(d$j>1),nrow(d))
for(w in 2:length(ends)){
d[ends[w-1]:ends[w],"Track"]<-w-1
}
#remove tracks that are shorter than 1 days
track_time<-d %>% group_by(Track) %>% summarize(mt=difftime(max(as.POSIXct(timestamp)),min(as.POSIXct(timestamp)),units="hours")) %>% filter(mt>=24) %>% .$Track
d<-d[d$Track %in% track_time,]
#renumber the tracks
d$Track<-as.numeric(as.factor(d$Track))
return(d)
}
sxy<-lapply(sxy,timed,step_length=step_length)
#Format matrices for jags
mdat<-bind_rows(sxy)
sxy<-split(mdat,list(mdat$Animal,mdat$Track),drop=TRUE)
sxy<-lapply(sxy,function(x){
#How many observations in each step length segment
x$step<-as.numeric(cut(as.POSIXct(x$timestamp),paste(step_length,"hours")))
return(x)
})
mdat<-bind_rows(sxy)
mdat %>% group_by(Animal) %>% summarize(n=n())
###################################################
#filter by two whales for the moment
#mdat<-mdat %>% filter(Animal %in% c("131127","131136"))
#mdat<-mdat %>% filter(Animal %in% c("131127"))
####################################################
#refactor animal
mdat$Animal<-as.numeric(as.factor(mdat$Animal))
##Split into format for JAGS
#total number of steps per track/animal
steps_all<-mdat %>% group_by(Animal,Track) %>% summarize(n=length(unique(step)))
# give each step a label
mdat<-mdat %>% group_by(Animal,Track,step) %>% mutate(jStep=1:n())
#Cast time array
j<-reshape2::acast(mdat,Animal~Track~step~jStep,value.var="j")
#how many observations per individual in each step
mdat$step<-factor(mdat$step,levels=1:max(steps_all$n))
idx<-reshape2::melt(table(mdat$Animal,mdat$Track,mdat$step))
colnames(idx)<-c("Animal","Track","step","jStep")
idx<-reshape2::acast(data=idx,Animal~Track~step)
#Individuals
ind=length(unique(mdat$Animal))
#tracks per indivudal
tracks<-mdat %>% group_by(Animal) %>% summarize(tracks=length(unique(Track))) %>% .$tracks
#steps per track
steps<-reshape2::acast(steps_all,Animal~Track,value.var="n")
#obs array
obs<-reshape2::melt(mdat,measure.vars=c("Longitude","Latitude"))
obs<-reshape2::acast(obs,Animal~Track~step~jStep~variable,fun.aggregate = mean)
#argos class array
mdat$argos.lc<-factor(mdat$Quality,levels=c(3,2,1,0,"A","B"))
mdat$numargos<-as.numeric(mdat$argos.lc)
obs_class<-reshape2::acast(mdat,Animal~Track~step~jStep,value.var="numargos",fun.aggregate = min)
obs_class[!is.finite(obs_class)]<-NA
#average dive depth array
maxdive<-reshape2::acast(mdat,Animal~Track~step~jStep,value.var="DepthMax",fun.aggregate = mean)
#fill the empty values
maxdive[!is.finite(maxdive)]<-NA
#average number of dives
diveduration<-reshape2::acast(mdat,Animal~Track~step~jStep,value.var="DurationMax")
#no dives, fill empty
divecount<-reshape2::acast(mdat,Animal~Track~step,value.var="DepthMax",fun.aggregate = length)
divecount[divecount==0]<-NA
dive[3,1,2,6]
dive[3,1,12,6]
maxdive[3,1,12,6]
maxdive[3,1,12,6]
maxdive
min(maxdive)
min(maxdive,na.rm=T)
which.min(maxdive)
maxdive[10793]
maxdive[10793]
ind
which.min
?which.min
arrayInd(which.min(maxdive))
arrayInd(which.min(maxdive),dim(maxdive))
arrayInd(which.min(maxdive),dim(maxdive))
maxdive[3,1,12,6]
maxdive[3,1,12,]
library(tidyr)
library(ggplot2)
library(maptools)
library(raster)
library(data.table)
library(dplyr)
library(stringr)
library(chron)
library(R2jags)
library(boot)
library(knitr)
library(truncnorm)
newModel=T
opts_chunk$set(echo=F,warning=F,message=F,fig.width=11)
mytheme<-theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank(),axis.title.x=element_blank(),axis.title.y=element_blank(),panel.grid=element_blank())
if(!newModel){
load("/Users/Ben/Dropbox/Whales/Dive/WhalePhys.RData")
newModel=F
}
#get gps data
f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback",pattern="Locations",full.names=T,recursive = T)
#just grab five individuals for now
gdat<-lapply(f,function(x) read.csv(x,stringsAsFactors=F))
gdat<-lapply(gdat,function(x){
x$Quality<-as.character(x$Quality)
return(x)
})
gdat<-bind_rows(gdat)
#timestamp
gdat$Date<-as.POSIXct(gdat$Date,format="%H:%M:%S %d-%b-%Y",tz="Etc/GMT+3")
#get dive data files
f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback/",pattern="Behavior",full.names=T,recursive = T)
dat<-bind_rows(lapply(f,read.csv))
#TODO convert histos.csv to usable dive data?
# f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback/2017",pattern="Histos",full.names=T,recursive = T)
# hdat<-bind_rows(lapply(f,read.csv))
# hdat<-hdat %>% filter(HistType=="DiveDepth") %>% dplyr::select(Animal=Ptt,Date,Bin1,Bin2,Bin3,Bin4,Bin5,Bin6,Bin7,Bin8,Bin9)
#
# #gather and replace with meters
# colnames(hdat)[c(-1,-2)]<-c(10,20,50,100,150,200,300,400,500)
#
# hdat<-gather(hdat,Animal,Date)
# colnames(hdat)<-c("Animal","Date","Bin","value")
# hdat$Bin<-as.numeric(hdat$Bin)
#For each animal at each time, highest non-zero bin
#hdat %>% group_by(Animal,Date) %>% filter(!value==0) %>% summarize(max(Bin))
dat$GMTtime<-as.POSIXct(dat$End,format="%H:%M:%S %d-%b-%Y",tz="Etc/GMT+3")
#local time
dat$timestamp<-as.POSIXct(format(dat$GMTtime,tz="Etc/GMT+3"))
dat$Month<-months(dat$timestamp)
dat$Month<-factor(dat$Month,levels=month.name)
dat$Hour<-strftime(dat$timestamp,format="%H")
dat$Year<-years(dat$timestamp)
#create unique messages
indices<-which(dat$What=="Message")
counter=1
dat$ID<-NA
for (x in 1:(length(indices)-1)){
dat[indices[x]:indices[x+1],"ID"]<-counter
counter=counter+1
}
dive<-dat %>% filter(What=="Dive")%>% dplyr::select(Animal=Ptt,timestamp,Hour,Month,Year, ID,Start,DepthMax,DepthMin,DurationMax,DurationMin)
dive<-dive[!is.na(dive$Month),]
#remove duplicate data
dive<-dive %>% arrange(Animal,timestamp)
dive<-dive[!duplicated(dive),]
ggplot(dive,aes(x=timestamp,y=-DepthMax)) + geom_point(size=0.1) + geom_line(size=0.1) + facet_wrap(~Animal,scales="free") + theme_bw()
ggsave("Figures/perindividual.jpeg",height=6,width=12)
##Merge with geographic data and format for JAGS
messages<-dat %>% filter(dat$What=="Message")
messages$timestamp<-as.POSIXct(messages$End,format="%H:%M:%S %d-%b-%Y",tz="Etc/GMT+3")
#look up the time interval that best fits
setDT(gdat)            ## convert to data.table by reference
setDT(messages)            ## same
setkey(messages, Ptt,timestamp)    ## set the column to perform the join on
setkey(gdat,Ptt, Date)    ## same as above
ans = gdat[messages, roll=Inf] ## perform rolling join
ans<-as.data.frame(ans)
message_join<-ans %>% dplyr::select(Date,Animal=Ptt,Date,Quality,Latitude,Longitude,ID)
mdat<-merge(dat,message_join,by="ID")
mdat<-mdat %>% filter(What=="Dive")
#The maxiumum dive depth based on the geographic message
mdat<-mdat %>% dplyr::select(ID,Animal,Latitude,Longitude,timestamp,Date,Month,Hour,Year,DepthMax,DurationMax,DurationMin,Quality)
mdat<-mdat %>% group_by(ID,Animal) %>% slice(which.max(DepthMax)) %>% arrange(Animal,timestamp) %>% filter(!is.na(Latitude))
#crop by extent
d<-SpatialPointsDataFrame(cbind(mdat$Longitude,mdat$Latitude),data=data.frame(mdat),proj4string=CRS("+proj=longlat +datum=WGS84"))
cropoly<-readShapePoly("Data/CutPolygon.shp",proj4string=CRS("+proj=longlat +datum=WGS84"))
b<-d[!is.na(d %over% cropoly)[,2],]
mdat<-b@data
mdat %>% group_by(Animal) %>% summarize(n=n())
nrow(mdat)
#set max depth to km
mdat$DepthMax<-mdat$DepthMax/1000
#set duration to minutes
mdat$DurationMax<-mdat$DurationMax/60
#view data
ggplot(data=mdat)+geom_path(aes(x=Longitude, y=Latitude,group=Animal),size=.5) + geom_point(aes(x=Longitude, y=Latitude,col=DepthMax))+ borders(fill="grey90") + coord_cartesian(ylim = range(mdat$Latitude),xlim=range(mdat$Longitude)) + theme_bw() + mytheme + scale_color_continuous(low="blue",high="red") + labs(col="Max Dive Depth (km)")
ggsave("Figures/Map.svg")
ggsave("Figures/Map.png")
##Time is the beginning of the first point.
step_length=6
sxy<-split(mdat,mdat$Animal)
#time diff function
timed<-function(d,step_length){
d$j[1]<-0
for (x in 2:nrow(d)){
d$j[x]<-as.numeric(difftime(as.POSIXct(d$timestamp[x]),as.POSIXct(d$timestamp[x-1]),units="mins"))/(step_length*60)
}
#Split out track endings
ends<-c(1,which(d$j>1),nrow(d))
for(w in 2:length(ends)){
d[ends[w-1]:ends[w],"Track"]<-w-1
}
#remove tracks that are shorter than 1 days
track_time<-d %>% group_by(Track) %>% summarize(mt=difftime(max(as.POSIXct(timestamp)),min(as.POSIXct(timestamp)),units="hours")) %>% filter(mt>=24) %>% .$Track
d<-d[d$Track %in% track_time,]
#renumber the tracks
d$Track<-as.numeric(as.factor(d$Track))
return(d)
}
sxy<-lapply(sxy,timed,step_length=step_length)
#Format matrices for jags
mdat<-bind_rows(sxy)
sxy<-split(mdat,list(mdat$Animal,mdat$Track),drop=TRUE)
sxy<-lapply(sxy,function(x){
#How many observations in each step length segment
x$step<-as.numeric(cut(as.POSIXct(x$timestamp),paste(step_length,"hours")))
return(x)
})
mdat<-bind_rows(sxy)
mdat %>% group_by(Animal) %>% summarize(n=n())
###################################################
#filter by two whales for the moment
#mdat<-mdat %>% filter(Animal %in% c("131127","131136"))
#mdat<-mdat %>% filter(Animal %in% c("131127"))
####################################################
#refactor animal
mdat$Animal<-as.numeric(as.factor(mdat$Animal))
##Split into format for JAGS
#total number of steps per track/animal
steps_all<-mdat %>% group_by(Animal,Track) %>% summarize(n=length(unique(step)))
# give each step a label
mdat<-mdat %>% group_by(Animal,Track,step) %>% mutate(jStep=1:n())
#Cast time array
j<-reshape2::acast(mdat,Animal~Track~step~jStep,value.var="j")
#how many observations per individual in each step
mdat$step<-factor(mdat$step,levels=1:max(steps_all$n))
idx<-reshape2::melt(table(mdat$Animal,mdat$Track,mdat$step))
colnames(idx)<-c("Animal","Track","step","jStep")
idx<-reshape2::acast(data=idx,Animal~Track~step)
#Individuals
ind=length(unique(mdat$Animal))
#tracks per indivudal
tracks<-mdat %>% group_by(Animal) %>% summarize(tracks=length(unique(Track))) %>% .$tracks
#steps per track
steps<-reshape2::acast(steps_all,Animal~Track,value.var="n")
#obs array
obs<-reshape2::melt(mdat,measure.vars=c("Longitude","Latitude"))
obs<-reshape2::acast(obs,Animal~Track~step~jStep~variable,fun.aggregate = mean)
#argos class array
mdat$argos.lc<-factor(mdat$Quality,levels=c(3,2,1,0,"A","B"))
mdat$numargos<-as.numeric(mdat$argos.lc)
obs_class<-reshape2::acast(mdat,Animal~Track~step~jStep,value.var="numargos",fun.aggregate = min)
obs_class[!is.finite(obs_class)]<-NA
#average dive depth array
maxdive<-reshape2::acast(mdat,Animal~Track~step~jStep,value.var="DepthMax",fun.aggregate = mean)
#fill the empty values
maxdive[!is.finite(maxdive)]<-NA
#average number of dives
diveduration<-reshape2::acast(mdat,Animal~Track~step~jStep,value.var="DurationMax")
#no dives, fill empty
divecount<-reshape2::acast(mdat,Animal~Track~step,value.var="DepthMax",fun.aggregate = length)
divecount[divecount==0]<-NA
#source jags file
source("Bayesian/Diving.R")
#prior cov shape
R <- diag(c(1,1))
data=list(duration=diveduration,divecount=divecount,dive=maxdive,argos=obs,steps=steps,R=R,ind=ind,j=j,idx=idx,tracks=tracks,argos_class=obs_class)
#paramters to track
pt<-c("alpha","gamma","lambda_count","duration_mu","duration_tau","depth_mu","depth_tau","dive_new","state","E","Enew")
if(newModel){
system.time(diving<-jags.parallel(model.file = "Bayesian/Diving.jags",data=data,n.chains=2,parameters.to.save=pt,n.iter=4000,n.burnin=3500,n.thin=2,DIC=FALSE))
}
dim(maxdive)
is.finite(maxdive)
maxdive
dive[3,1,12,6]
dive[3,1,12,]
#source jags file
source("Bayesian/Diving.R")
#having a sampling error, just testing
dive[3,1,12,6]<-0.3
#prior cov shape
R <- diag(c(1,1))
data=list(duration=diveduration,divecount=divecount,dive=maxdive,argos=obs,steps=steps,R=R,ind=ind,j=j,idx=idx,tracks=tracks,argos_class=obs_class)
#paramters to track
pt<-c("alpha","gamma","lambda_count","duration_mu","duration_tau","depth_mu","depth_tau","dive_new","state","E","Enew")
if(newModel){
system.time(diving<-jags.parallel(model.file = "Bayesian/Diving.jags",data=data,n.chains=2,parameters.to.save=pt,n.iter=4000,n.burnin=3500,n.thin=2,DIC=FALSE))
}
