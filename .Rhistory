mdat<-mdat %>% dplyr::select(ID,Animal,Latitude,Longitude,timestamp,Date,Month,Hour,Year,DepthMax,DurationMax,DurationMin,Quality)
mdat<-mdat %>% group_by(ID,Animal) %>% slice(which.max(DepthMax)) %>% arrange(Animal,timestamp) %>% filter(!is.na(Latitude))
#crop by extent
d<-SpatialPointsDataFrame(cbind(mdat$Longitude,mdat$Latitude),data=data.frame(mdat),proj4string=CRS("+proj=longlat +datum=WGS84"))
cropoly<-readShapePoly("Data/CutPolygon.shp",proj4string=CRS("+proj=longlat +datum=WGS84"))
b<-d[!is.na(d %over% cropoly)[,2],]
mdat<-b@data
mdat %>% group_by(Animal) %>% summarize(n=n())
nrow(mdat)
#set max depth to km
mdat$DepthMax<-mdat$DepthMax/1000
#set duration to minutes
mdat$DurationMax<-mdat$DurationMax/60
#view data
ggplot(data=mdat)+geom_path(aes(x=Longitude, y=Latitude,group=Animal),size=.5) + geom_point(aes(x=Longitude, y=Latitude,col=DepthMax))+ borders(fill="grey90") + coord_cartesian(ylim = range(mdat$Latitude),xlim=range(mdat$Longitude)) + theme_bw() + mytheme + scale_color_continuous(low="blue",high="red") + labs(col="Max Dive Depth (km)")
ggsave("Figures/Map.svg")
ggsave("Figures/Map.png")
##Time is the beginning of the first point.
step_length=6
sxy<-split(mdat,mdat$Animal)
#time diff function
timed<-function(d,step_length){
d$j[1]<-0
for (x in 2:nrow(d)){
d$j[x]<-as.numeric(difftime(as.POSIXct(d$timestamp[x]),as.POSIXct(d$timestamp[x-1]),units="mins"))/(step_length*60)
}
#Split out track endings
ends<-c(1,which(d$j>1),nrow(d))
for(w in 2:length(ends)){
d[ends[w-1]:ends[w],"Track"]<-w-1
}
#remove tracks that are shorter than 1 days
track_time<-d %>% group_by(Track) %>% summarize(mt=difftime(max(as.POSIXct(timestamp)),min(as.POSIXct(timestamp)),units="hours")) %>% filter(mt>=24) %>% .$Track
d<-d[d$Track %in% track_time,]
#renumber the tracks
d$Track<-as.numeric(as.factor(d$Track))
return(d)
}
sxy<-lapply(sxy,timed,step_length=step_length)
#Format matrices for jags
mdat<-bind_rows(sxy)
sxy<-split(mdat,list(mdat$Animal,mdat$Track),drop=TRUE)
sxy<-lapply(sxy,function(x){
#How many observations in each step length segment
x$step<-as.numeric(cut(as.POSIXct(x$timestamp),paste(step_length,"hours")))
return(x)
})
mdat<-bind_rows(sxy)
mdat %>% group_by(Animal) %>% summarize(n=n())
###################################################
#filter by two whales for the moment
#mdat<-mdat %>% filter(Animal %in% c("131127","131136"))
#mdat<-mdat %>% filter(Animal %in% c("131127"))
####################################################
#refactor animal
mdat$Animal<-as.numeric(as.factor(mdat$Animal))
##Split into format for JAGS
#total number of steps per track/animal
steps_all<-mdat %>% group_by(Animal,Track) %>% summarize(n=length(unique(step)))
# give each step a label
mdat<-mdat %>% group_by(Animal,Track,step) %>% mutate(jStep=1:n())
#Cast time array
j<-reshape2::acast(mdat,Animal~Track~step~jStep,value.var="j")
#how many observations per individual in each step
mdat$step<-factor(mdat$step,levels=1:max(steps_all$n))
idx<-reshape2::melt(table(mdat$Animal,mdat$Track,mdat$step))
colnames(idx)<-c("Animal","Track","step","jStep")
idx<-reshape2::acast(data=idx,Animal~Track~step)
#Individuals
ind=length(unique(mdat$Animal))
#tracks per indivudal
tracks<-mdat %>% group_by(Animal) %>% summarize(tracks=length(unique(Track))) %>% .$tracks
#steps per track
steps<-reshape2::acast(steps_all,Animal~Track,value.var="n")
#obs array
obs<-reshape2::melt(mdat,measure.vars=c("Longitude","Latitude"))
obs<-reshape2::acast(obs,Animal~Track~step~jStep~variable,fun.aggregate = mean)
#argos class array
mdat$argos.lc<-factor(mdat$Quality,levels=c(3,2,1,0,"A","B"))
mdat$numargos<-as.numeric(mdat$argos.lc)
obs_class<-reshape2::acast(mdat,Animal~Track~step~jStep,value.var="numargos",fun.aggregate = min)
obs_class[!is.finite(obs_class)]<-NA
#average dive depth array
maxdive<-reshape2::acast(mdat,Animal~Track~step~jStep,value.var="DepthMax",fun.aggregate = mean)
#fill the empty values
maxdive[!is.finite(maxdive)]<-NA
#average number of dives
diveduration<-reshape2::acast(mdat,Animal~Track~step~jStep,value.var="DurationMax")
#no dives, fill empty
divecount<-reshape2::acast(mdat,Animal~Track~step,value.var="DepthMax",fun.aggregate = length)
divecount[divecount==0]<-NA
#source jags file
source("Bayesian/Diving.R")
#prior cov shape
R <- diag(c(1,1))
data=list(duration=diveduration,divecount=divecount,dive=maxdive,argos=obs,steps=steps,R=R,ind=ind,j=j,idx=idx,tracks=tracks,argos_class=obs_class)
#paramters to track
pt<-c("alpha","gamma","lambda_count","duration_mu","duration_tau","depth_mu","depth_tau","dive_new","state","E","Enew")
if(newModel){
system.time(diving<-jags.parallel(model.file = "Bayesian/Diving.jags",data=data,n.chains=2,parameters.to.save=pt,n.iter=4000,n.burnin=3500,n.thin=2,DIC=FALSE))
}
dim(maxdive)
is.finite(maxdive)
maxdive
dive[3,1,12,6]
dive[3,1,12,]
#source jags file
source("Bayesian/Diving.R")
#having a sampling error, just testing
dive[3,1,12,6]<-0.3
#prior cov shape
R <- diag(c(1,1))
data=list(duration=diveduration,divecount=divecount,dive=maxdive,argos=obs,steps=steps,R=R,ind=ind,j=j,idx=idx,tracks=tracks,argos_class=obs_class)
#paramters to track
pt<-c("alpha","gamma","lambda_count","duration_mu","duration_tau","depth_mu","depth_tau","dive_new","state","E","Enew")
if(newModel){
system.time(diving<-jags.parallel(model.file = "Bayesian/Diving.jags",data=data,n.chains=2,parameters.to.save=pt,n.iter=4000,n.burnin=3500,n.thin=2,DIC=FALSE))
}
f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback/",pattern="Behavior",full.names=T,recursive = T)
library(tidyr)
library(ggplot2)
library(maptools)
library(raster)
library(data.table)
library(dplyr)
library(stringr)
library(chron)
library(R2jags)
library(boot)
library(knitr)
library(truncnorm)
newModel=T
opts_chunk$set(echo=F,warning=F,message=F,fig.width=11)
mytheme<-theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank(),axis.title.x=element_blank(),axis.title.y=element_blank(),panel.grid=element_blank())
f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback",pattern="Locations",full.names=T,recursive = T)
f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback/2017",pattern="Histos",full.names=T,recursive = T)
hdat<-bind_rows(lapply(f,read.csv))
head(hdat)
hdat<-hdat %>% filter(HistType=="DiveDepth") %>% dplyr::select(Animal=Ptt,Date,Count,Bin1,Bin2,Bin3,Bin4,Bin5,Bin6,Bin7,Bin8,Bin9)
head(hdat)
colnames(hdat)[c(-1,-2)]<-c(10,20,50,100,150,200,300,400,500)
colnames(hdat)[c(-1,-2,-3)]<-c(10,20,50,100,150,200,300,400,500)
head(hdat)
hdat<-bind_rows(lapply(f,read.csv))
hdat<-hdat %>% filter(HistType=="DiveDepth") %>% dplyr::select(Animal=Ptt,Date,Count,Bin1,Bin2,Bin3,Bin4,Bin5,Bin6,Bin7,Bin8,Bin9)
colnames(hdat)[c(-1,-2,-3)]<-c(10,20,50,100,150,200,300,400,500)
head(hdat)
f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback/2017",pattern="Histos",full.names=T,recursive = T)
hdat<-bind_rows(lapply(f,read.csv))
dat2017<-hdat %>% filter(HistType=="DiveDepth") %>% dplyr::select(Animal=Ptt,Date,Count,Bin1,Bin2,Bin3,Bin4,Bin5,Bin6,Bin7,Bin8,Bin9)
colnames(dat2017)[c(-1,-2,-3)]<-c(10,20,50,100,150,200,300,400,500)
dat2017$Date
dat$GMTtime<-as.POSIXct(dat2017$Date,format="%H:%M:%S %d-%b-%Y",tz="GMT")
dat2017$GMTtime<-as.POSIXct(dat2017$Date,format="%H:%M:%S %d-%b-%Y",tz="GMT")
head(dat)
head(dat2017)
dat2017$timestamp<-as.POSIXct(format(dat2017$GMTtime,tz="Etc/GMT+3"))
head(dat2017)
f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback/",pattern="Behavior",full.names=T,recursive = T)
dat<-bind_rows(lapply(f,read.csv))
f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback/2017",pattern="Histos",full.names=T,recursive = T)
hdat<-bind_rows(lapply(f,read.csv))
dat2017<-hdat %>% filter(HistType=="DiveDepth") %>% dplyr::select(Animal=Ptt,Date,Count,Bin1,Bin2,Bin3,Bin4,Bin5,Bin6,Bin7,Bin8,Bin9)
colnames(dat2017)[c(-1,-2,-3)]<-c(10,20,50,100,150,200,300,400,500)
dat2017$GMTtime<-as.POSIXct(dat2017$Date,format="%H:%M:%S %d-%b-%Y",tz="GMT")
dat2017$timestamp<-as.POSIXct(format(dat2017$GMTtime,tz="Etc/GMT+3"))
dat$GMTtime<-as.POSIXct(dat$End,format="%H:%M:%S %d-%b-%Y",tz="GMT")
dat$timestamp<-as.POSIXct(format(dat$GMTtime,tz="Etc/GMT+3"))
dat<-bind_rows(dat,dat2017)
head(dat)
f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback",pattern="Locations",full.names=T,recursive = T)
gdat<-lapply(f,function(x) read.csv(x,stringsAsFactors=F))
gdat<-lapply(f,function(x) read.csv(x,stringsAsFactors=F))
gdat<-lapply(gdat,function(x){
x$Quality<-as.character(x$Quality)
return(x)
})
gdat<-bind_rows(gdat)
gdat<-bind_rows(gdat)
gdat$Date<-as.POSIXct(gdat$Date,format="%H:%M:%S %d-%b-%Y",tz="Etc/GMT+3")
f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback/",pattern="Behavior",full.names=T,recursive = T)
f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback/2017",pattern="Histos",full.names=T,recursive = T)
hdat<-bind_rows(lapply(f,read.csv))
dat2017<-hdat %>% filter(HistType=="DiveDepth") %>% dplyr::select(Animal=Ptt,Date,Count,Bin1,Bin2,Bin3,Bin4,Bin5,Bin6,Bin7,Bin8,Bin9)
colnames(dat2017)[c(-1,-2,-3)]<-c(10,20,50,100,150,200,300,400,500)
head(dat)
head(dat2017)
if(!newModel){
load("/Users/Ben/Dropbox/Whales/Dive/WhalePhys.RData")
newModel=F
}
f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback",pattern="Locations",full.names=T,recursive = T)
#just grab five individuals for now
gdat<-lapply(f,function(x) read.csv(x,stringsAsFactors=F))
gdat<-lapply(gdat,function(x){
x$Quality<-as.character(x$Quality)
return(x)
})
gdat<-bind_rows(gdat)
#timestamp
gdat$Date<-as.POSIXct(gdat$Date,format="%H:%M:%S %d-%b-%Y",tz="Etc/GMT+3")
#get dive data files
##2016 data##
f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback/",pattern="Behavior",full.names=T,recursive = T)
dat<-bind_rows(lapply(f,read.csv))
#2017 data
f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback/2017",pattern="Histos",full.names=T,recursive = T)
hdat<-bind_rows(lapply(f,read.csv))
dat2017<-hdat %>% filter(HistType=="DiveDepth") %>% dplyr::select(Animal=Ptt,Date,Count,Bin1,Bin2,Bin3,Bin4,Bin5,Bin6,Bin7,Bin8,Bin9)
# #gather and replace with meters
colnames(dat2017)[c(-1,-2,-3)]<-c(10,20,50,100,150,200,300,400,500)
#Date, Time
dat2017$GMTtime<-as.POSIXct(dat2017$Date,format="%H:%M:%S %d-%b-%Y",tz="GMT")
dat2017$timestamp<-as.POSIXct(format(dat2017$GMTtime,tz="Etc/GMT+3"))
dat$GMTtime<-as.POSIXct(dat$End,format="%H:%M:%S %d-%b-%Y",tz="GMT")
#local time
dat$timestamp<-as.POSIXct(format(dat$GMTtime,tz="Etc/GMT+3"))
head(dat)
#create unique messages
indices<-which(dat$What=="Message")
counter=1
dat$ID<-NA
for (x in 1:(length(indices)-1)){
dat[indices[x]:indices[x+1],"ID"]<-counter
counter=counter+1
}
dive<-dat %>% filter(What=="Dive")%>% dplyr::select(Animal=Ptt,timestamp,Hour,Month,Year, ID,Start,DepthMax,DepthMin,DurationMax,DurationMin)
dive<-dat %>% filter(What=="Dive")%>% dplyr::select(Animal=Ptt,timestamp, ID,Start,DepthMax,DepthMin,DurationMax,DurationMin)
dive<-dive[!is.na(dive$Month),]
if(!newModel){
load("/Users/Ben/Dropbox/Whales/Dive/WhalePhys.RData")
newModel=F
}
f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback",pattern="Locations",full.names=T,recursive = T)
#just grab five individuals for now
gdat<-lapply(f,function(x) read.csv(x,stringsAsFactors=F))
gdat<-lapply(gdat,function(x){
x$Quality<-as.character(x$Quality)
return(x)
})
gdat<-bind_rows(gdat)
#timestamp
gdat$Date<-as.POSIXct(gdat$Date,format="%H:%M:%S %d-%b-%Y",tz="Etc/GMT+3")
#get dive data files
##2016 data##
f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback/",pattern="Behavior",full.names=T,recursive = T)
dat<-bind_rows(lapply(f,read.csv))
#2017 data
f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback/2017",pattern="Histos",full.names=T,recursive = T)
hdat<-bind_rows(lapply(f,read.csv))
dat2017<-hdat %>% filter(HistType=="DiveDepth") %>% dplyr::select(Animal=Ptt,Date,Count,Bin1,Bin2,Bin3,Bin4,Bin5,Bin6,Bin7,Bin8,Bin9)
# #gather and replace with meters
colnames(dat2017)[c(-1,-2,-3)]<-c(10,20,50,100,150,200,300,400,500)
#Date, Time
dat2017$GMTtime<-as.POSIXct(dat2017$Date,format="%H:%M:%S %d-%b-%Y",tz="GMT")
dat2017$timestamp<-as.POSIXct(format(dat2017$GMTtime,tz="Etc/GMT+3"))
dat$GMTtime<-as.POSIXct(dat$End,format="%H:%M:%S %d-%b-%Y",tz="GMT")
#local time
dat$timestamp<-as.POSIXct(format(dat$GMTtime,tz="Etc/GMT+3"))
#create unique messages
indices<-which(dat$What=="Message")
counter=1
dat$ID<-NA
for (x in 1:(length(indices)-1)){
dat[indices[x]:indices[x+1],"ID"]<-counter
counter=counter+1
}
dive<-dat %>% filter(What=="Dive")%>% dplyr::select(Animal=Ptt,timestamp, ID,Start,DepthMax,DepthMin,DurationMax,DurationMin)
#remove duplicate data
dive<-dive %>% arrange(Animal,timestamp)
dive<-dive[!duplicated(dive),]
#Combine data
dive<-bind_rows(dive,dat2017)
dive$Month<-months(dive$timestamp)
dive$Month<-factor(dive$Month,levels=month.name)
dive$Hour<-strftime(dive$timestamp,format="%H")
dive$Year<-years(dive$timestamp)
dive<-dive[!is.na(dive$Month),]
head(dive)
dim(dive)
table(dive$Year)
dive %>% group_by(Animal,Year) %>% distinct()
dive %>% group_by(Animal,Year) %>% summarize(n=n())
head(dive)
if(!newModel){
load("/Users/Ben/Dropbox/Whales/Dive/WhalePhys.RData")
newModel=F
}
f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback",pattern="Locations",full.names=T,recursive = T)
#just grab five individuals for now
gdat<-lapply(f,function(x) read.csv(x,stringsAsFactors=F))
gdat<-lapply(gdat,function(x){
x$Quality<-as.character(x$Quality)
return(x)
})
gdat<-bind_rows(gdat)
#timestamp
gdat$Date<-as.POSIXct(gdat$Date,format="%H:%M:%S %d-%b-%Y",tz="Etc/GMT+3")
#get dive data files
##2016 data##
f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback/",pattern="Behavior",full.names=T,recursive = T)
dat<-bind_rows(lapply(f,read.csv))
#2017 data
f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback/2017",pattern="Histos",full.names=T,recursive = T)
hdat<-bind_rows(lapply(f,read.csv))
dat2017<-hdat %>% filter(HistType=="DiveDepth") %>% dplyr::select(Animal=Ptt,Date,Count,Bin1,Bin2,Bin3,Bin4,Bin5,Bin6,Bin7,Bin8,Bin9)
# #gather and replace with meters
colnames(dat2017)[c(-1,-2,-3)]<-c(10,20,50,100,150,200,300,400,500)
#Date, Time
dat2017$GMTtime<-as.POSIXct(dat2017$Date,format="%H:%M:%S %d-%b-%Y",tz="GMT")
dat2017$timestamp<-as.POSIXct(format(dat2017$GMTtime,tz="Etc/GMT+3"))
dat$GMTtime<-as.POSIXct(dat$End,format="%H:%M:%S %d-%b-%Y",tz="GMT")
#local time
dat$timestamp<-as.POSIXct(format(dat$GMTtime,tz="Etc/GMT+3"))
#create unique messages
indices<-which(dat$What=="Message")
counter=1
dat$ID<-NA
for (x in 1:(length(indices)-1)){
dat[indices[x]:indices[x+1],"ID"]<-counter
counter=counter+1
}
dive<-dat %>% filter(What=="Dive")%>% dplyr::select(Animal=Ptt,timestamp, ID,Start,DepthMax,DepthMin,DurationMax,DurationMin,GMTtime)
#remove duplicate data
dive<-dive %>% arrange(Animal,timestamp)
dive<-dive[!duplicated(dive),]
#Combine data
dive<-bind_rows(dive,dat2017)
dive$Month<-months(dive$timestamp)
dive$Month<-factor(dive$Month,levels=month.name)
dive$Hour<-strftime(dive$timestamp,format="%H")
dive$Year<-years(dive$timestamp)
dive<-dive[!is.na(dive$Month),]
dive %>% group_by(Animal,Year) %>% summarize(n=n())
head(dive)
ggplot(dive,aes(x=timestamp,y=-DepthMax)) + geom_point(size=0.1) + geom_line(size=0.1) + facet_wrap(~Animal,scales="free") + theme_bw()
ggplot(dive[dive$Year=="2016",],aes(x=timestamp,y=-DepthMax)) + geom_point(size=0.1) + geom_line(size=0.1) + facet_wrap(~Animal,scales="free") + theme_bw()
gather(dat2017,Animal,Date,Count)
gather(dat2017,Animal,Date,Count)
gather(dat2017-Animal,-Date,Count)
gather(dat2017,-Animal,-Date,Count)
f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback/2017",pattern="Histos",full.names=T,recursive = T)
hdat<-bind_rows(lapply(f,read.csv))
dat2017<-hdat %>% filter(HistType=="DiveDepth") %>% dplyr::select(Animal=Ptt,Date,Count,Bin1,Bin2,Bin3,Bin4,Bin5,Bin6,Bin7,Bin8,Bin9)
colnames(dat2017)[c(-1,-2,-3)]<-c(10,20,50,100,150,200,300,400,500)
gather(dat2017,-Animal,-Date,Count)
gather(dat2017,-Animal,-Date,Count)
gather(dat2017,-Animal,-Date,-Count)
gather(dat2017,Animal,-Date,-Count)
gather(dat2017,10,20)
gather(dat2017,10,20,-Animal)
gather(dat2017,10,20,-Animal)
gather(dat2017,10,20,-Animal,-Date)
gather(dat2017,10,20,-Animal,-Date,-Count)
gather(dat2017,10,20,30,40,50,60-Animal,-Date,-Count)
gather(dat2017,10,20,30,40,50,60,-Animal,-Date,-Count)
gather(dat2017,-Animal,-Date,-Count)
gather(dat2017,Jon,-Animal,-Date,-Count)
gather(dat2017,10:500)
gather(dat2017,10:500,-Animal)
gather(dat2017,10:500,-Animal,-Date,-Count)
gather(dat2017,10:500,-Animal,-Date)
head(gather(dat2017,10:500,-Animal,-Date))
head(gather(dat2017,10:500,Animal,-Date))
head(gather(dat2017,Depth,10:500,Animal,-Date))
head(gather(dat2017,Depth,10:500,-Date))
head(gather(dat2017,Depth,10:500,-Date,-Animal))
head(gather(dat2017,Depth,10:500,-Date,-Animal,-Count))
head(gather(dat2017,Depth,Percentage,10:500,-Date,-Animal,-Count))
head(gather(dat2017,Depth,Percentage,-Date,-Animal,-Count))
if(!newModel){
load("/Users/Ben/Dropbox/Whales/Dive/WhalePhys.RData")
newModel=F
}
f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback",pattern="Locations",full.names=T,recursive = T)
#just grab five individuals for now
gdat<-lapply(f,function(x) read.csv(x,stringsAsFactors=F))
gdat<-lapply(gdat,function(x){
x$Quality<-as.character(x$Quality)
return(x)
})
gdat<-bind_rows(gdat)
#timestamp
gdat$Date<-as.POSIXct(gdat$Date,format="%H:%M:%S %d-%b-%Y",tz="Etc/GMT+3")
#get dive data files
##2016 data##
f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback/",pattern="Behavior",full.names=T,recursive = T)
dat<-bind_rows(lapply(f,read.csv))
#2017 data
f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback/2017",pattern="Histos",full.names=T,recursive = T)
hdat<-bind_rows(lapply(f,read.csv))
dat2017<-hdat %>% filter(HistType=="DiveDepth") %>% dplyr::select(Animal=Ptt,Date,Count,Bin1,Bin2,Bin3,Bin4,Bin5,Bin6,Bin7,Bin8,Bin9)
# #gather and replace with meters
colnames(dat2017)[c(-1,-2,-3)]<-c(10,20,50,100,150,200,300,400,500)
#gather bins
dat2017<-gather(dat2017,Depth,Percentage,-Date,-Animal,-Count)
#Date, Time
dat2017$GMTtime<-as.POSIXct(dat2017$Date,format="%H:%M:%S %d-%b-%Y",tz="GMT")
dat2017$timestamp<-as.POSIXct(format(dat2017$GMTtime,tz="Etc/GMT+3"))
dat$GMTtime<-as.POSIXct(dat$End,format="%H:%M:%S %d-%b-%Y",tz="GMT")
#local time
dat$timestamp<-as.POSIXct(format(dat$GMTtime,tz="Etc/GMT+3"))
#create unique messages
indices<-which(dat$What=="Message")
counter=1
dat$ID<-NA
for (x in 1:(length(indices)-1)){
dat[indices[x]:indices[x+1],"ID"]<-counter
counter=counter+1
}
dive<-dat %>% filter(What=="Dive")%>% dplyr::select(Animal=Ptt,timestamp, ID,Start,DepthMax,DepthMin,DurationMax,DurationMin,GMTtime)
#remove duplicate data
dive<-dive %>% arrange(Animal,timestamp)
dive<-dive[!duplicated(dive),]
#Combine data
dive<-bind_rows(dive,dat2017)
dive$Month<-months(dive$timestamp)
dive$Month<-factor(dive$Month,levels=month.name)
dive$Hour<-strftime(dive$timestamp,format="%H")
dive$Year<-years(dive$timestamp)
dive<-dive[!is.na(dive$Month),]
dive %>% group_by(Animal,Year) %>% summarize(n=n())
head(dive)
ggplot(dive[dive$Year=="2017",]) + geom_tile(aes(Depth,Percentage,fill=Percentage)) + facet_wrap(~Animal)
ggplot(dive[dive$Year=="2017",]) + geom_tile(aes(Depth,fill=Percentage)) + facet_wrap(~Animal,scale=Free)
ggplot(dive[dive$Year=="2017",]) + geom_tile(aes(Depth,fill=Percentage)) + facet_wrap(~Animal,scale="free")
ggplot(dive[dive$Year=="2017",]) + geom_tile(aes(Depth,y=Percentage)) + facet_wrap(~Animal,scale="free")
ggplot(dive[dive$Year=="2017",]) + geom_tile(aes(Depth,y=Animal,fill=percentage))
ggplot(dive[dive$Year=="2017",]) + geom_tile(aes(Depth,y=Animal,fill=Percentage))
dat2017$Percentage
as.numeric(dat2017$Percentage)
as.numeric(dat2017$Percentage)
9906.182/60
9906.182/60/60
dive[which.max(dive$DurationMax),]
dive %>% arrange(DurationMax)
dive %>% arrange(DurationMax) %>% head()
dive %>% arrange(desc(DurationMax)) %>% head()
dive %>% arrange(desc(DurationMax)) %>% head() %>% mutate(DurationMax/60)
dive %>% arrange(desc(DurationMax)) %>% head(10) %>% mutate(DurationMax/60)
dive %>% arrange(desc(DurationMax)) %>% head(30) %>% mutate(DurationMax/60)
dive %>% arrange(desc(DurationMax)) %>% head(40) %>% mutate(DurationMax/60)
dive %>% arrange(desc(DurationMax)) %>% head(50) %>% mutate(DurationMax/60)
dive %>% arrange(desc(DurationMax)) %>% head(100) %>% mutate(DurationMax/60)
dive %>% arrange(desc(DurationMax)) %>% head(200) %>% mutate(DurationMax/60)
dive %>% arrange(desc(DurationMax)) %>% filter((DurationMax/60)>40))
dive %>% arrange(desc(DurationMax)) %>% filter((DurationMax/60)>40)
dive %>% arrange(desc(DurationMax)) %>% filter((DurationMax/60)>40)
dive %>% arrange(desc(DurationMax)) %>% filter((DurationMax/60)>40) %>% group_by(Animal) %>% summarize(n=n())
dive %>% arrange(desc(DurationMax)) %>% filter((DurationMin/60)>40) %>% group_by(Animal) %>% summarize(n=n())
dim(dive)
dive %>% arrange(desc(DurationMax)) %>% filter((DurationMin/60)>30) %>% group_by(Animal) %>% summarize(n=n())
head(dive)
load("/Users/Ben/Dropbox/Whales/Dive/WhalePhys.RData")
ggplot(pred_dives)+  geom_density(aes(x=value),col='red') + geom_density(data=mdat,aes(x=DepthMax),col="black",size=1.5) + theme_bw() + labs(x="Dive Depth (m)")
ggplot(pred_dives)+  geom_density(aes(x=DurationMax),col='red') + geom_density(data=mdat,aes(x=DurationMax),col="black",size=1.5) + theme_bw() + labs(x="Dive Depth (m)")
ggplot(pc_dive[!pc_dive$parameter %in% c("dive_new","state","E","Enew","eval"),],aes(x=value,col=as.factor(chain))) + geom_histogram() + facet_wrap(~par,scales="free")
ggplot(pc_dive[!pc_dive$parameter %in% c("dive_new","state","E","Enew","eval"),],aes(x=value,fill=as.factor(chain))) + geom_histogram() + facet_wrap(~par,scales="free")
if(!newModel){
load("/Users/Ben/Dropbox/Whales/Dive/WhalePhys.RData")
newModel=F
}
f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback",pattern="Locations",full.names=T,recursive = T)
#just grab five individuals for now
gdat<-lapply(f,function(x) read.csv(x,stringsAsFactors=F))
gdat<-lapply(gdat,function(x){
x$Quality<-as.character(x$Quality)
return(x)
})
gdat<-bind_rows(gdat)
#timestamp
gdat$Date<-as.POSIXct(gdat$Date,format="%H:%M:%S %d-%b-%Y",tz="Etc/GMT+3")
#get dive data files
##2016 data##
f<-list.files("/Users/Ben/Dropbox/Whales/Data/Humpback/",pattern="Behavior",full.names=T,recursive = T)
dat<-bind_rows(lapply(f,read.csv))
dat$GMTtime<-as.POSIXct(dat$End,format="%H:%M:%S %d-%b-%Y",tz="GMT")
#local time
dat$timestamp<-as.POSIXct(format(dat$GMTtime,tz="Etc/GMT+3"))
#create unique messages
indices<-which(dat$What=="Message")
counter=1
dat$ID<-NA
for (x in 1:(length(indices)-1)){
dat[indices[x]:indices[x+1],"ID"]<-counter
counter=counter+1
}
dive<-dat %>% filter(What=="Dive")%>% dplyr::select(Animal=Ptt,timestamp, ID,Start,DepthMax,DepthMin,DurationMax,DurationMin,GMTtime)
#remove duplicate data
dive<-dive %>% arrange(Animal,timestamp)
dive<-dive[!duplicated(dive),]
dive$Month<-months(dive$timestamp)
dive$Month<-factor(dive$Month,levels=month.name)
dive$Hour<-strftime(dive$timestamp,format="%H")
dive$Year<-years(dive$timestamp)
dive<-dive[!is.na(dive$Month),]
dive %>% group_by(Animal,Year) %>% summarize(n=n())
head(dive)
##Merge with geographic data and format for JAGS
messages<-dat %>% filter(dat$What=="Message")
messages$timestamp<-as.POSIXct(messages$End,format="%H:%M:%S %d-%b-%Y",tz="Etc/GMT+3")
#look up the time interval that best fits
setDT(gdat)            ## convert to data.table by reference
setDT(messages)            ## same
setkey(messages, Ptt,timestamp)    ## set the column to perform the join on
setkey(gdat,Ptt, Date)    ## same as above
ans = gdat[messages, roll=Inf] ## perform rolling join
ans<-as.data.frame(ans)
message_join<-ans %>% dplyr::select(Date,Animal=Ptt,Date,Quality,Latitude,Longitude,ID)
mdat<-merge(dat,message_join,by="ID")
mdat<-mdat %>% filter(What=="Dive")
head(mdat)
