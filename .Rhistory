#which intervals are more than 12 hours apart
Track=c()
Track[1]<-1
counter=1
for(x in 2:length(unique(d$interval))){
difft<-as.numeric(difftime(as.POSIXct(unique(d$interval)[x]),as.POSIXct(unique(d$interval)[x-1]),units="hours"))
if(difft>step_length){
counter=counter+1
}
Track[x]<-counter
}
d<-d %>% inner_join(data.frame(interval=unique(d$interval),Track))
#First position in each track must be a valid position, recode
d<-d %>% group_by(Track) %>% filter(timestamp >= min(timestamp[!is.na(Latitude)]))
#get jStep and interval time
d<-d %>% group_by(interval) %>% mutate(j=difftime(timestamp,as.POSIXct(interval,tz="GMT"),units="hours")/step_length,jStep=1:n())
#set step and remove tracks less than 2 steps, a bit ugly to maintain subgroup order.
d<-d %>% group_by(Track) %>% mutate(step=as.numeric(as.factor(as.character(interval)))) %>% filter(max(step) > 2)
#reset track numbering
#need more than 3 jSteps
#d<-d %>% group_by(Track,step) %>% filter(max(jStep) > 3)
#remove tracks that are shorter than 12 hours
track_time<-d %>% group_by(Track) %>% summarize(mt=difftime(max(as.POSIXct(timestamp)),min(as.POSIXct(timestamp)),units="hours")) %>% filter(mt>=12) %>% .$Track
return(d)
}
sxy<-lapply(sxy,timed,step_length=step_length)
mdat<-bind_rows(sxy)
#recode tracks and steps to make ordinal
mdat
mdat<-dive
mybbox<-make_bbox(data=mdat,lat=Latitude,lon=Longitude,f=0.1)
troy <- get_map(location = mybbox, maptype = "toner-background")
attr_troy <- attr(troy, "bb")    # save attributes from original
# change color in raster
troy[troy == "#FFFFFF"] <- "#C0C0C0"
troy[troy == "#000000"] <- "#FFFFFF"
# correct class, attributes
class(troy) <- c("ggmap", "raster")
attr(troy, "bb") <- attr_troy
#nice to have it as a function
makemap<-function(x){
mybbox<-make_bbox(data=x,lat=Latitude,lon=Longitude,f=0.1)
troy <- get_map(location = mybbox, maptype = "toner-background")
attr_troy <- attr(troy, "bb")    # save attributes from original
# change color in raster
troy[troy == "#FFFFFF"] <- "#C0C0C0"
troy[troy == "#000000"] <- "#FFFFFF"
# correct class, attributes
class(troy) <- c("ggmap", "raster")
attr(troy, "bb") <- attr_troy
return(troy)
}
##Time is the beginning of the first point.
step_length=6
sxy<-split(mdat,mdat$Animal)
#Cut into tracks
#time diff function
timed<-function(d,step_length){
#Order and startmwith a valid observation
d<-d %>% arrange(timestamp)
startpoint<-min(which(!is.na(d$Latitude)))
d<-d[startpoint:nrow(d),]
d$interval <- cut(d$timestamp,breaks = seq(min(d$timestamp), max(d$timestamp)+step_length*3600, as.difftime(step_length, units="hours")))
#If there are no argos observations, remove interval.
remove_interval<-d %>% group_by(interval) %>% summarize(n=sum(!is.na(Latitude))) %>% filter(n==0)
d<-d %>% filter(!interval %in% remove_interval$interval )
#No empty dive intervals
remove_dive<-d %>% group_by(interval) %>% summarize(n=sum(!is.na(DepthMax))) %>% filter(n==0)
d<-d %>% filter(!interval %in% remove_dive$interval )
#Can we have empty intervals?
d<-d %>% filter(!is.na(interval)) %>% droplevels()
#which intervals are more than 12 hours apart
Track=c()
Track[1]<-1
counter=1
for(x in 2:length(unique(d$interval))){
difft<-as.numeric(difftime(as.POSIXct(unique(d$interval)[x]),as.POSIXct(unique(d$interval)[x-1]),units="hours"))
if(difft>step_length){
counter=counter+1
}
Track[x]<-counter
}
d<-d %>% inner_join(data.frame(interval=unique(d$interval),Track))
#First position in each track must be a valid position, recode
d<-d %>% group_by(Track) %>% filter(timestamp >= min(timestamp[!is.na(Latitude)]))
#get jStep and interval time
d<-d %>% group_by(interval) %>% mutate(j=difftime(timestamp,as.POSIXct(interval,tz="GMT"),units="hours")/step_length,jStep=1:n())
#set step and remove tracks less than 2 steps, a bit ugly to maintain subgroup order.
d<-d %>% group_by(Track) %>% mutate(step=as.numeric(as.factor(as.character(interval)))) %>% filter(max(step) > 2)
#reset track numbering
#need more than 3 jSteps
#d<-d %>% group_by(Track,step) %>% filter(max(jStep) > 3)
#remove tracks that are shorter than 12 hours
track_time<-d %>% group_by(Track) %>% summarize(mt=difftime(max(as.POSIXct(timestamp)),min(as.POSIXct(timestamp)),units="hours")) %>% filter(mt>=12) %>% .$Track
return(d)
}
sxy<-lapply(sxy,timed,step_length=step_length)
mdat<-bind_rows(sxy)
#recode tracks and steps to make ordinal
mdat
mdat$jAnimal<-as.numeric(as.factor(mdat$Animal))
j<-reshape2::acast(mdat,jAnimal~Track~step~jStep,value.var="j")
idx<-mdat %>% group_by(jAnimal,Track,step) %>% summarize(n=n())
colnames(idx)<-c("Animal","Track","step","jStep")
idx<-reshape2::acast(data=idx,Animal~Track~step)
idx
idx[10,,]
idx[10,8,]
steps_all
steps_all %>% filter(Animal=="131136")
mdat %>% filter(Animal=="131136",Track==6)
mdat %>% filter(Animal=="131136",Track==6) %>% unique(.$interval)
mdat %>% filter(Animal=="131136",Track==6) %>% unique(.$step)
a<-mdat %>% filter(Animal=="131136",Track==6)
a$step
mdat %>% filter(Animal=="131136",Track==8)
mdat %>% group_by(Animal) %>% mutate(Track=as.numeric(as.factor(Track)))
# Chunk 1
library(tidyr)
library(ggplot2)
library(maptools)
library(shiny)
library(raster)
library(data.table)
library(ggmap)
library(leaflet)
library(dplyr)
library(stringr)
library(chron)
library(R2jags)
library(boot)
library(knitr)
library(MCMCpack)
library(truncnorm)
newModel=T
opts_chunk$set(echo=F,warning=F,message=F,fig.width=11)
mytheme<-theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank(),axis.title.x=element_blank(),axis.title.y=element_blank(),panel.grid=element_blank())
# Chunk 2
if(!newModel){
load("/Users/Ben/Dropbox/Whales/Dive/WhalePhys.RData")
newModel=F
}
#get gps data
f<-list.files("Data/Humpback",pattern="Locations",full.names=T,recursive = T)
gdat<-lapply(f,function(x) read.csv(x,stringsAsFactors=F))
gdat<-lapply(gdat,function(x){
x$Quality<-as.character(x$Quality)
return(x)
})
gdat<-bind_rows(gdat)
#timestamp
gdat$timestamp<-as.POSIXct(gdat$Date,format="%H:%M:%S %d-%b-%Y",tz="GMT")
#
gdat<-gdat[!is.na(gdat$Latitude),]
#crop by extent
d<-SpatialPointsDataFrame(cbind(gdat$Longitude,gdat$Latitude),data=data.frame(gdat),proj4string=CRS("+proj=longlat +datum=WGS84"))
cropoly<-readShapePoly("Data/CutPolygon.shp",proj4string=CRS("+proj=longlat +datum=WGS84"))
b<-d[!is.na(d %over% cropoly)[,2],]
gdat<-b@data
#get dive data files
f<-list.files("Data/Humpback/",pattern="Behavior",full.names=T,recursive = T)
dat<-bind_rows(lapply(f,read.csv))
dat$timestamp<-as.POSIXct(dat$End,format="%H:%M:%S %d-%b-%Y",tz="GMT")
dat$Month<-months(dat$timestamp)
dat$Month<-factor(dat$Month,levels=month.name)
dat$Hour<-strftime(dat$timestamp,format="%H")
dat$Year<-years(dat$timestamp)
### for testing
gdat<-gdat %>% filter(Ptt %in% unique(dat$Ptt))
gdat<-gdat %>% dplyr::select(Animal=Ptt,timestamp,Quality,Latitude,Longitude)
gdat$Month<-months(gdat$timestamp)
gdat$Month<-factor(gdat$Month,levels=month.name)
dive<-dat %>% filter(What=="Dive")%>% dplyr::select(Animal=Ptt,timestamp,Hour,Month,Year,DepthMax,DepthMin,DurationMax,DurationMin)
dive<-bind_rows(gdat,dive)
#order by timestamp
dive<-dive %>% arrange(timestamp)
mdat<-dive
# Chunk 7
mdat %>% group_by(Animal) %>% summarize(n=n(),argos=sum(!is.na(Latitude)),dive=sum(!is.na(DepthMax)))
nrow(mdat)
# Chunk 8
#set max depth to km
#mdat$DepthMax<-mdat$DepthMax/1000
#Specifiy local time
#local time
mdat$localtime<-as.POSIXct(format(mdat$timestamp,tz="etc/GMT+3"))
mdat$LocalHour<-as.numeric(strftime(mdat$localtime,format="%H"))
#set duration to minutes
mdat$DurationMax<-mdat$DurationMax/60
#view data
ggmap(troy) + geom_point(data=mdat,aes(x=Longitude, y=Latitude,col=as.factor(Animal)),size=0.3)  + mytheme + labs(col="Animal")
ggsave("Figures/Map.svg")
ggsave("Figures/Map.png",height=6,width=8)
# Chunk 11
##Time is the beginning of the first point.
step_length=6
sxy<-split(mdat,mdat$Animal)
#Cut into tracks
#time diff function
timed<-function(d,step_length){
#Order and startmwith a valid observation
d<-d %>% arrange(timestamp)
startpoint<-min(which(!is.na(d$Latitude)))
d<-d[startpoint:nrow(d),]
d$interval <- cut(d$timestamp,breaks = seq(min(d$timestamp), max(d$timestamp)+step_length*3600, as.difftime(step_length, units="hours")))
#If there are no argos observations, remove interval.
remove_interval<-d %>% group_by(interval) %>% summarize(n=sum(!is.na(Latitude))) %>% filter(n==0)
d<-d %>% filter(!interval %in% remove_interval$interval )
#No empty dive intervals
remove_dive<-d %>% group_by(interval) %>% summarize(n=sum(!is.na(DepthMax))) %>% filter(n==0)
d<-d %>% filter(!interval %in% remove_dive$interval )
#Can we have empty intervals?
d<-d %>% filter(!is.na(interval)) %>% droplevels()
#which intervals are more than 12 hours apart
Track=c()
Track[1]<-1
counter=1
for(x in 2:length(unique(d$interval))){
difft<-as.numeric(difftime(as.POSIXct(unique(d$interval)[x]),as.POSIXct(unique(d$interval)[x-1]),units="hours"))
if(difft>step_length){
counter=counter+1
}
Track[x]<-counter
}
d<-d %>% inner_join(data.frame(interval=unique(d$interval),Track))
#First position in each track must be a valid position, recode
d<-d %>% group_by(Track) %>% filter(timestamp >= min(timestamp[!is.na(Latitude)]))
#get jStep and interval time
d<-d %>% group_by(interval) %>% mutate(j=difftime(timestamp,as.POSIXct(interval,tz="GMT"),units="hours")/step_length,jStep=1:n())
#set step and remove tracks less than 2 steps, a bit ugly to maintain subgroup order.
d<-d %>% group_by(Track) %>% mutate(step=as.numeric(as.factor(as.character(interval)))) %>% filter(max(step) > 2)
#reset track numbering
#need more than 3 jSteps
#d<-d %>% group_by(Track,step) %>% filter(max(jStep) > 3)
#remove tracks that are shorter than 12 hours
track_time<-d %>% group_by(Track) %>% summarize(mt=difftime(max(as.POSIXct(timestamp)),min(as.POSIXct(timestamp)),units="hours")) %>% filter(mt>=12) %>% .$Track
return(d)
}
sxy<-lapply(sxy,timed,step_length=step_length)
mdat<-bind_rows(sxy)
#recode tracks and steps to make ordinal
mdat<-mdat %>% group_by(Animal) %>% mutate(Track=as.numeric(as.factor(Track)))
# Chunk 12
mdat %>% group_by(Animal) %>% summarize(n=n())
mdat %>% group_by(Animal) %>% summarize(Tracks=length(unique(Track)))
ggplot(mdat[,],aes(x=timestamp,y=-DepthMax)) + geom_point(size=0.1) + geom_line(size=0.1) + facet_wrap(~Animal,scales="free",ncol=2) + theme_bw() + geom_point(data=dive[!is.na(dive$Latitude),],y=0,col="red",size=1,aes(x=timestamp))
# Chunk 13
###################################################
#filter by two whales for the moment
#mdat<-mdat %>% filter(Animal %in% c("131132","131127"))
#mdat<-mdat %>% filter(Animal %in% "131115")
#remake map
troy<-makemap(mdat)
####################################################
#refactor animal
mdat$jAnimal<-as.numeric(as.factor(mdat$Animal))
##Split into format for JAGS
#Cast time array
j<-reshape2::acast(mdat,jAnimal~Track~step~jStep,value.var="j")
#how many observations per individual in each step
idx<-mdat %>% group_by(jAnimal,Track,step) %>% summarize(n=n())
colnames(idx)<-c("Animal","Track","step","jStep")
idx<-reshape2::acast(data=idx,Animal~Track~step)
#Individuals
ind=length(unique(mdat$Animal))
#tracks per indivudal
tracks<-mdat %>% group_by(Animal) %>% summarize(tracks=length(unique(Track))) %>% .$tracks
#steps per track
steps_all<-mdat %>% group_by(Animal,Track) %>% summarize(n=length(unique(step)))
steps<-reshape2::acast(steps_all,Animal~Track,value.var="n")
#obs array
obs<-reshape2::melt(mdat,measure.vars=c("Longitude","Latitude"))
obs<-reshape2::acast(obs,Animal~Track~step~jStep~variable,fun.aggregate = mean)
obs[!is.finite(obs)]<-NA
#argos class array
mdat$argos.lc<-factor(mdat$Quality,levels=c(3,2,1,0,"A","B"))
mdat$numargos<-as.numeric(mdat$argos.lc)
obs_class<-reshape2::acast(mdat,Animal~Track~step~jStep,value.var="numargos",fun.aggregate = min)
#set interpolated observations to having lowest class of argos error
obs_class[!is.finite(obs_class)]<-6
#average dive depth array
maxdive<-reshape2::acast(mdat,Animal~Track~step~jStep,value.var="DepthMax",fun.aggregate = mean)
hours<-reshape2::acast(mdat,Animal~Track~step~jStep,value.var="LocalHour")
#fill the empty values
maxdive[!is.finite(maxdive)]<-NA
# Chunk 14
# Chunk 15
#source jags file
source("Bayesian/NestedDive.R")
#prior cov shape
R <- diag(c(1,1))
data=list(hours=hours,divedepth=maxdive,argos=obs,steps=steps,R=R,ind=ind,j=j,idx=idx,tracks=tracks,argos_class=obs_class)
#Inits
stage_init<-hours
stage_init[]<-1
InitStage <- function() {list(stage=array(data=2,dim=c(dim(hours))))}
#paramters to track
pt<-c("alpha","sub_alpha","gamma","depth_mu","depth_tau","dive_new","state", "sub_state","E","Enew")
if(newModel){
system.time(diving<-jags.parallel(model.file = "Bayesian/NestedDive.jags",data=data,n.chains=2,parameters.to.save=pt,n.iter=100,n.burnin=0,n.thin=2,DIC=FALSE,inits = InitStage))
}
# Chunk 1
library(tidyr)
library(ggplot2)
library(maptools)
library(shiny)
library(raster)
library(data.table)
library(ggmap)
library(leaflet)
library(dplyr)
library(stringr)
library(chron)
library(R2jags)
library(boot)
library(knitr)
library(MCMCpack)
library(truncnorm)
newModel=T
opts_chunk$set(echo=F,warning=F,message=F,fig.width=11)
mytheme<-theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank(),axis.title.x=element_blank(),axis.title.y=element_blank(),panel.grid=element_blank())
# Chunk 2
if(!newModel){
load("/Users/Ben/Dropbox/Whales/Dive/WhalePhys.RData")
newModel=F
}
#get gps data
f<-list.files("Data/Humpback",pattern="Locations",full.names=T,recursive = T)
gdat<-lapply(f,function(x) read.csv(x,stringsAsFactors=F))
gdat<-lapply(gdat,function(x){
x$Quality<-as.character(x$Quality)
return(x)
})
gdat<-bind_rows(gdat)
#timestamp
gdat$timestamp<-as.POSIXct(gdat$Date,format="%H:%M:%S %d-%b-%Y",tz="GMT")
#
gdat<-gdat[!is.na(gdat$Latitude),]
#crop by extent
d<-SpatialPointsDataFrame(cbind(gdat$Longitude,gdat$Latitude),data=data.frame(gdat),proj4string=CRS("+proj=longlat +datum=WGS84"))
cropoly<-readShapePoly("Data/CutPolygon.shp",proj4string=CRS("+proj=longlat +datum=WGS84"))
b<-d[!is.na(d %over% cropoly)[,2],]
gdat<-b@data
#get dive data files
f<-list.files("Data/Humpback/",pattern="Behavior",full.names=T,recursive = T)
dat<-bind_rows(lapply(f,read.csv))
dat$timestamp<-as.POSIXct(dat$End,format="%H:%M:%S %d-%b-%Y",tz="GMT")
dat$Month<-months(dat$timestamp)
dat$Month<-factor(dat$Month,levels=month.name)
dat$Hour<-strftime(dat$timestamp,format="%H")
dat$Year<-years(dat$timestamp)
### for testing
gdat<-gdat %>% filter(Ptt %in% unique(dat$Ptt))
gdat<-gdat %>% dplyr::select(Animal=Ptt,timestamp,Quality,Latitude,Longitude)
gdat$Month<-months(gdat$timestamp)
gdat$Month<-factor(gdat$Month,levels=month.name)
dive<-dat %>% filter(What=="Dive")%>% dplyr::select(Animal=Ptt,timestamp,Hour,Month,Year,DepthMax,DepthMin,DurationMax,DurationMin)
dive<-bind_rows(gdat,dive)
#order by timestamp
dive<-dive %>% arrange(timestamp)
mdat<-dive
# Chunk 3
ggplot(dive[,],aes(x=timestamp,y=DepthMax)) + geom_point(size=0.1) + geom_line(size=0.1) + facet_wrap(~Animal,scales="free",ncol=2) + theme_bw() + labs(x="Date",y="Dive Depth (m)") + scale_y_reverse()
ggsave("Figures/perindividual.jpeg",height=12,width=13)
ggsave("Figures/perindividual.svg",height=12,width=13)
# Chunk 5
acf_df<-function(x){
bacf <- acf(x, plot = FALSE)
bacfdf <- with(bacf, data.frame(lag, acf))
}
acplot<-dive %>% group_by(Animal) %>% arrange(timestamp) %>% filter(!is.na(DepthMax)) %>% do(acf_df(.$DepthMax))
q <- ggplot(data = acplot, mapping = aes(x = lag, y = acf)) +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0))
q + facet_wrap(~Animal)
# Chunk 6
mybbox<-make_bbox(data=mdat,lat=Latitude,lon=Longitude,f=0.1)
troy <- get_map(location = mybbox, maptype = "toner-background")
attr_troy <- attr(troy, "bb")    # save attributes from original
# change color in raster
troy[troy == "#FFFFFF"] <- "#C0C0C0"
troy[troy == "#000000"] <- "#FFFFFF"
# correct class, attributes
class(troy) <- c("ggmap", "raster")
attr(troy, "bb") <- attr_troy
#nice to have it as a function
makemap<-function(x){
mybbox<-make_bbox(data=x,lat=Latitude,lon=Longitude,f=0.1)
troy <- get_map(location = mybbox, maptype = "toner-background")
attr_troy <- attr(troy, "bb")    # save attributes from original
# change color in raster
troy[troy == "#FFFFFF"] <- "#C0C0C0"
troy[troy == "#000000"] <- "#FFFFFF"
# correct class, attributes
class(troy) <- c("ggmap", "raster")
attr(troy, "bb") <- attr_troy
return(troy)
}
# Chunk 7
mdat %>% group_by(Animal) %>% summarize(n=n(),argos=sum(!is.na(Latitude)),dive=sum(!is.na(DepthMax)))
nrow(mdat)
# Chunk 8
#set max depth to km
#mdat$DepthMax<-mdat$DepthMax/1000
#Specifiy local time
#local time
mdat$localtime<-as.POSIXct(format(mdat$timestamp,tz="etc/GMT+3"))
mdat$LocalHour<-as.numeric(strftime(mdat$localtime,format="%H"))
#set duration to minutes
mdat$DurationMax<-mdat$DurationMax/60
#view data
ggmap(troy) + geom_point(data=mdat,aes(x=Longitude, y=Latitude,col=as.factor(Animal)),size=0.3)  + mytheme + labs(col="Animal")
ggsave("Figures/Map.svg")
ggsave("Figures/Map.png",height=6,width=8)
# Chunk 11
##Time is the beginning of the first point.
step_length=6
sxy<-split(mdat,mdat$Animal)
#Cut into tracks
#time diff function
timed<-function(d,step_length){
#Order and startmwith a valid observation
d<-d %>% arrange(timestamp)
startpoint<-min(which(!is.na(d$Latitude)))
d<-d[startpoint:nrow(d),]
d$interval <- cut(d$timestamp,breaks = seq(min(d$timestamp), max(d$timestamp)+step_length*3600, as.difftime(step_length, units="hours")))
#If there are no argos observations, remove interval.
remove_interval<-d %>% group_by(interval) %>% summarize(n=sum(!is.na(Latitude))) %>% filter(n==0)
d<-d %>% filter(!interval %in% remove_interval$interval )
#No empty dive intervals
remove_dive<-d %>% group_by(interval) %>% summarize(n=sum(!is.na(DepthMax))) %>% filter(n==0)
d<-d %>% filter(!interval %in% remove_dive$interval )
#Can we have empty intervals?
d<-d %>% filter(!is.na(interval)) %>% droplevels()
#which intervals are more than 12 hours apart
Track=c()
Track[1]<-1
counter=1
for(x in 2:length(unique(d$interval))){
difft<-as.numeric(difftime(as.POSIXct(unique(d$interval)[x]),as.POSIXct(unique(d$interval)[x-1]),units="hours"))
if(difft>step_length){
counter=counter+1
}
Track[x]<-counter
}
d<-d %>% inner_join(data.frame(interval=unique(d$interval),Track))
#First position in each track must be a valid position, recode
d<-d %>% group_by(Track) %>% filter(timestamp >= min(timestamp[!is.na(Latitude)]))
#get jStep and interval time
d<-d %>% group_by(interval) %>% mutate(j=difftime(timestamp,as.POSIXct(interval,tz="GMT"),units="hours")/step_length,jStep=1:n())
#set step and remove tracks less than 2 steps, a bit ugly to maintain subgroup order.
d<-d %>% group_by(Track) %>% mutate(step=as.numeric(as.factor(as.character(interval)))) %>% filter(max(step) > 2)
#reset track numbering
#need more than 3 jSteps
#d<-d %>% group_by(Track,step) %>% filter(max(jStep) > 3)
#remove tracks that are shorter than 12 hours
track_time<-d %>% group_by(Track) %>% summarize(mt=difftime(max(as.POSIXct(timestamp)),min(as.POSIXct(timestamp)),units="hours")) %>% filter(mt>=12) %>% .$Track
return(d)
}
sxy<-lapply(sxy,timed,step_length=step_length)
mdat<-bind_rows(sxy)
#recode tracks and steps to make ordinal
mdat<-mdat %>% group_by(Animal) %>% mutate(Track=as.numeric(as.factor(Track)))
# Chunk 12
mdat %>% group_by(Animal) %>% summarize(n=n())
mdat %>% group_by(Animal) %>% summarize(Tracks=length(unique(Track)))
ggplot(mdat[,],aes(x=timestamp,y=-DepthMax)) + geom_point(size=0.1) + geom_line(size=0.1) + facet_wrap(~Animal,scales="free",ncol=2) + theme_bw() + geom_point(data=dive[!is.na(dive$Latitude),],y=0,col="red",size=1,aes(x=timestamp))
# Chunk 13
###################################################
#filter by two whales for the moment
#mdat<-mdat %>% filter(!Animal %in% c("131132","131127"))
#mdat<-mdat %>% filter(Animal %in% "131115")
#remake map
troy<-makemap(mdat)
####################################################
#refactor animal
mdat$jAnimal<-as.numeric(as.factor(mdat$Animal))
##Split into format for JAGS
#Cast time array
j<-reshape2::acast(mdat,jAnimal~Track~step~jStep,value.var="j")
#how many observations per individual in each step
idx<-mdat %>% group_by(jAnimal,Track,step) %>% summarize(n=n())
colnames(idx)<-c("Animal","Track","step","jStep")
idx<-reshape2::acast(data=idx,Animal~Track~step)
#Individuals
ind=length(unique(mdat$Animal))
#tracks per indivudal
tracks<-mdat %>% group_by(Animal) %>% summarize(tracks=length(unique(Track))) %>% .$tracks
#steps per track
steps_all<-mdat %>% group_by(Animal,Track) %>% summarize(n=length(unique(step)))
steps<-reshape2::acast(steps_all,Animal~Track,value.var="n")
#obs array
obs<-reshape2::melt(mdat,measure.vars=c("Longitude","Latitude"))
obs<-reshape2::acast(obs,Animal~Track~step~jStep~variable,fun.aggregate = mean)
obs[!is.finite(obs)]<-NA
#argos class array
mdat$argos.lc<-factor(mdat$Quality,levels=c(3,2,1,0,"A","B"))
mdat$numargos<-as.numeric(mdat$argos.lc)
obs_class<-reshape2::acast(mdat,Animal~Track~step~jStep,value.var="numargos",fun.aggregate = min)
#set interpolated observations to having lowest class of argos error
obs_class[!is.finite(obs_class)]<-6
#average dive depth array
maxdive<-reshape2::acast(mdat,Animal~Track~step~jStep,value.var="DepthMax",fun.aggregate = mean)
hours<-reshape2::acast(mdat,Animal~Track~step~jStep,value.var="LocalHour")
#fill the empty values
maxdive[!is.finite(maxdive)]<-NA
# Chunk 14
mdat %>% group_by(Animal) %>% summarize(n=(),Start=min(timestamp),End=max(timestamp))
mdat %>% group_by(Animal) %>% summarize(n=n(),Start=min(timestamp),End=max(timestamp))
a<-mdat %>% group_by(Animal) %>% summarize(n=n(),Start=min(timestamp),End=max(timestamp))
write.csv(a,"Figures/Summarize.csv")
Version
